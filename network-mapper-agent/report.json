{
  "repo": {
    "path": "F:\\disruptiq-notes\\network-mapper-agent\\examples",
    "commit_hash": "f10b503611ec69c0e228d59997e06229b70e2ef8",
    "branch": "main",
    "scan_date": "2025-10-16T01:49:36.327416Z"
  },
  "network_activity_summary": {
    "total_network_calls": 13,
    "external_endpoints_detected": 8,
    "local_ports_exposed": 1,
    "signals_by_severity": {
      "critical": 0,
      "high": 3,
      "medium": 11,
      "low": 4,
      "info": 0
    }
  },
  "signals": [
    {
      "id": "hardurl-examples\\example.js-3-https://api.example.com/data",
      "type": "hardcoded_url",
      "detector_id": "hardcoded_url_v1",
      "file": "examples\\example.js",
      "line": 3,
      "column": 12,
      "severity": "medium",
      "confidence": 0.9,
      "detail": "Detected hardcoded external URL: https://api.example.com/data",
      "context": {
        "snippet": "axios.get('https://api.example.com/data')",
        "pre": "",
        "post": ".then(response => {"
      },
      "tags": [
        "external",
        "url",
        "hardcoded"
      ],
      "remediation": "Replace with env var process.env.API_URL or use internal proxy",
      "evidence": {
        "match": "https://api.example.com/data",
        "regex": "https?://[\\w\\.-/:?=&%+#]+"
      }
    },
    {
      "id": "hardurl-examples\\example.js-11-https://api.example.com/users",
      "type": "hardcoded_url",
      "detector_id": "hardcoded_url_v1",
      "file": "examples\\example.js",
      "line": 11,
      "column": 13,
      "severity": "medium",
      "confidence": 0.9,
      "detail": "Detected hardcoded external URL: https://api.example.com/users",
      "context": {
        "snippet": "axios.post('https://api.example.com/users', { name: 'John Doe' });",
        "pre": "",
        "post": ""
      },
      "tags": [
        "external",
        "url",
        "hardcoded"
      ],
      "remediation": "Replace with env var process.env.API_URL or use internal proxy",
      "evidence": {
        "match": "https://api.example.com/users",
        "regex": "https?://[\\w\\.-/:?=&%+#]+"
      }
    },
    {
      "id": "httpcall-examples\\example.js-3-axios.get",
      "type": "http_call",
      "detector_id": "http_call_v1",
      "file": "examples\\example.js",
      "line": 3,
      "column": 1,
      "severity": "medium",
      "confidence": 0.7,
      "detail": "Detected HTTP call: axios.get",
      "context": {
        "snippet": "axios.get('https://api.example.com/data')",
        "pre": "",
        "post": ".then(response => {"
      },
      "tags": [
        "network",
        "http",
        "api"
      ],
      "remediation": "Review the destination of the HTTP request. Consider using environment variables for endpoints rather than hardcoded URLs.",
      "evidence": {
        "match": "axios.get",
        "regex": "(fetch|axios|requests)\\s*\\.\\s*(get|post|put|delete)"
      }
    },
    {
      "id": "httpcall-examples\\example.js-11-axios.post",
      "type": "http_call",
      "detector_id": "http_call_v1",
      "file": "examples\\example.js",
      "line": 11,
      "column": 1,
      "severity": "medium",
      "confidence": 0.7,
      "detail": "Detected HTTP call: axios.post",
      "context": {
        "snippet": "axios.post('https://api.example.com/users', { name: 'John Doe' });",
        "pre": "",
        "post": ""
      },
      "tags": [
        "network",
        "http",
        "api"
      ],
      "remediation": "Review the destination of the HTTP request. Consider using environment variables for endpoints rather than hardcoded URLs.",
      "evidence": {
        "match": "axios.post",
        "regex": "(fetch|axios|requests)\\s*\\.\\s*(get|post|put|delete)"
      }
    },
    {
      "id": "envendpoint-examples\\env_example.js-1-process.env.API_URL",
      "type": "env_endpoint",
      "detector_id": "env_endpoint_v1",
      "file": "examples\\env_example.js",
      "line": 1,
      "column": 17,
      "severity": "low",
      "confidence": 0.7,
      "detail": "Detected environment variable used for endpoint: process.env.API_URL",
      "context": {
        "snippet": "const API_URL = process.env.API_URL || 'http://localhost:8080';",
        "pre": "",
        "post": "const SERVICE_ENDPOINT = process.env.SERVICE_ENDPOINT;"
      },
      "tags": [
        "configuration",
        "endpoint",
        "environment"
      ],
      "remediation": "Using environment variables for endpoints is good practice. Ensure sensitive endpoints are not exposed in client-side code.",
      "evidence": {
        "match": "process.env.API_URL",
        "regex": "process\\.env\\.(API_URL|SERVICE_ENDPOINT|DATABASE_URL)|os\\.environ\\.get\\(['\"](API_URL|SERVICE_ENDPOINT|DATABASE_URL)['\"]\\)"
      }
    },
    {
      "id": "envendpoint-examples\\env_example.js-2-process.env.SERVICE_ENDPOINT",
      "type": "env_endpoint",
      "detector_id": "env_endpoint_v1",
      "file": "examples\\env_example.js",
      "line": 2,
      "column": 26,
      "severity": "low",
      "confidence": 0.7,
      "detail": "Detected environment variable used for endpoint: process.env.SERVICE_ENDPOINT",
      "context": {
        "snippet": "const SERVICE_ENDPOINT = process.env.SERVICE_ENDPOINT;",
        "pre": "const API_URL = process.env.API_URL || 'http://localhost:8080';",
        "post": ""
      },
      "tags": [
        "configuration",
        "endpoint",
        "environment"
      ],
      "remediation": "Using environment variables for endpoints is good practice. Ensure sensitive endpoints are not exposed in client-side code.",
      "evidence": {
        "match": "process.env.SERVICE_ENDPOINT",
        "regex": "process\\.env\\.(API_URL|SERVICE_ENDPOINT|DATABASE_URL)|os\\.environ\\.get\\(['\"](API_URL|SERVICE_ENDPOINT|DATABASE_URL)['\"]\\)"
      }
    },
    {
      "id": "hardurl-examples\\env_example.js-1-http://localhost:8080",
      "type": "hardcoded_url",
      "detector_id": "hardcoded_url_v1",
      "file": "examples\\env_example.js",
      "line": 1,
      "column": 41,
      "severity": "medium",
      "confidence": 0.9,
      "detail": "Detected hardcoded external URL: http://localhost:8080",
      "context": {
        "snippet": "const API_URL = process.env.API_URL || 'http://localhost:8080';",
        "pre": "",
        "post": "const SERVICE_ENDPOINT = process.env.SERVICE_ENDPOINT;"
      },
      "tags": [
        "external",
        "url",
        "hardcoded"
      ],
      "remediation": "Replace with env var process.env.API_URL or use internal proxy",
      "evidence": {
        "match": "http://localhost:8080",
        "regex": "https?://[\\w\\.-/:?=&%+#]+"
      }
    },
    {
      "id": "certcheck-examples\\cert_example.py-3-verify=False",
      "type": "certificate_check",
      "detector_id": "certificate_check_v1",
      "file": "examples\\cert_example.py",
      "line": 3,
      "column": 37,
      "severity": "high",
      "confidence": 0.9,
      "detail": "Detected disabling of certificate verification: verify=False",
      "context": {
        "snippet": "requests.get('https://example.com', verify=False)",
        "pre": "",
        "post": ""
      },
      "tags": [
        "security",
        "certificate",
        "tls",
        "verification"
      ],
      "remediation": "Enable certificate verification to prevent man-in-the-middle attacks. Do not bypass certificate validation in production.",
      "evidence": {
        "match": "verify=False",
        "regex": "verify\\s*=\\s*False|rejectUnauthorized\\s*:\\s*false"
      }
    },
    {
      "id": "hardurl-examples\\cert_example.py-3-https://example.com",
      "type": "hardcoded_url",
      "detector_id": "hardcoded_url_v1",
      "file": "examples\\cert_example.py",
      "line": 3,
      "column": 15,
      "severity": "medium",
      "confidence": 0.9,
      "detail": "Detected hardcoded external URL: https://example.com",
      "context": {
        "snippet": "requests.get('https://example.com', verify=False)",
        "pre": "",
        "post": ""
      },
      "tags": [
        "external",
        "url",
        "hardcoded"
      ],
      "remediation": "Replace with env var process.env.API_URL or use internal proxy",
      "evidence": {
        "match": "https://example.com",
        "regex": "https?://[\\w\\.-/:?=&%+#]+"
      }
    },
    {
      "id": "httpcall-examples\\cert_example.py-3-requests.get",
      "type": "http_call",
      "detector_id": "http_call_v1",
      "file": "examples\\cert_example.py",
      "line": 3,
      "column": 1,
      "severity": "medium",
      "confidence": 0.7,
      "detail": "Detected HTTP call: requests.get",
      "context": {
        "snippet": "requests.get('https://example.com', verify=False)",
        "pre": "",
        "post": ""
      },
      "tags": [
        "network",
        "http",
        "api"
      ],
      "remediation": "Review the destination of the HTTP request. Consider using environment variables for endpoints rather than hardcoded URLs.",
      "evidence": {
        "match": "requests.get",
        "regex": "(fetch|axios|requests)\\s*\\.\\s*(get|post|put|delete)"
      }
    },
    {
      "id": "rawsocket-examples\\raw_socket_example.py-4-socket.socket(",
      "type": "raw_socket_usage",
      "detector_id": "raw_socket_v1",
      "file": "examples\\raw_socket_example.py",
      "line": 4,
      "column": 9,
      "severity": "medium",
      "confidence": 0.8,
      "detail": "Detected raw socket usage: socket.socket(",
      "context": {
        "snippet": "s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
        "pre": "def raw_socket_client():",
        "post": "s.connect(('127.0.0.1', 12345))"
      },
      "tags": [
        "network",
        "low-level",
        "socket"
      ],
      "remediation": "Consider using higher-level networking libraries rather than raw sockets when possible. Raw sockets are harder to secure.",
      "evidence": {
        "match": "socket.socket(",
        "regex": "socket\\.socket\\(|net\\.Socket\\("
      }
    },
    {
      "id": "cors-examples\\server.js-5-cors({origin: '*'})",
      "type": "cors_policy",
      "detector_id": "cors_policy_v1",
      "file": "examples\\server.js",
      "line": 5,
      "column": 9,
      "severity": "high",
      "confidence": 0.9,
      "detail": "Detected permissive CORS policy: cors({origin: '*'})",
      "context": {
        "snippet": "app.use(cors({origin: '*'}));",
        "pre": "",
        "post": ""
      },
      "tags": [
        "security",
        "cors",
        "permissive"
      ],
      "remediation": "Restrict origin to specific domains. Do not use wildcard origin in production environments.",
      "evidence": {
        "match": "cors({origin: '*'})",
        "regex": "cors\\s*\\(\\s*{\\s*origin\\s*:\\s*['\"]\\*['\"]\\s*}\\s*\\)"
      }
    },
    {
      "id": "portexp-examples\\server.js-7-3000",
      "type": "port_exposure",
      "detector_id": "port_exposure_v1",
      "file": "examples\\server.js",
      "line": 7,
      "column": 12,
      "severity": "high",
      "confidence": 0.8,
      "detail": "Detected port exposure: 3000",
      "context": {
        "snippet": "app.listen(3000, () => {",
        "pre": "",
        "post": "console.log('Server listening on port 3000');"
      },
      "tags": [
        "exposed",
        "http",
        "server",
        "port"
      ],
      "remediation": "Enable TLS or proxy behind reverse-proxy with TLS. Avoid binding insecure port in production.",
      "evidence": {
        "match": "listen(3000",
        "regex": "(listen|bind|serve)\\s*\\(\\s*(\\d{2,5})\\s*\\)",
        "match_groups": {
          "1": "listen",
          "2": "3000"
        }
      }
    },
    {
      "id": "hardurl-examples\\local_ip_example.js-1-http://192.168.1.100/api",
      "type": "hardcoded_url",
      "detector_id": "hardcoded_url_v1",
      "file": "examples\\local_ip_example.js",
      "line": 1,
      "column": 22,
      "severity": "medium",
      "confidence": 0.9,
      "detail": "Detected hardcoded external URL: http://192.168.1.100/api",
      "context": {
        "snippet": "const internalApi = 'http://192.168.1.100/api';",
        "pre": "",
        "post": "const devServer = 'http://10.0.0.5:3000';"
      },
      "tags": [
        "external",
        "url",
        "hardcoded"
      ],
      "remediation": "Replace with env var process.env.API_URL or use internal proxy",
      "evidence": {
        "match": "http://192.168.1.100/api",
        "regex": "https?://[\\w\\.-/:?=&%+#]+"
      }
    },
    {
      "id": "hardurl-examples\\local_ip_example.js-2-http://10.0.0.5:3000",
      "type": "hardcoded_url",
      "detector_id": "hardcoded_url_v1",
      "file": "examples\\local_ip_example.js",
      "line": 2,
      "column": 20,
      "severity": "medium",
      "confidence": 0.9,
      "detail": "Detected hardcoded external URL: http://10.0.0.5:3000",
      "context": {
        "snippet": "const devServer = 'http://10.0.0.5:3000';",
        "pre": "const internalApi = 'http://192.168.1.100/api';",
        "post": ""
      },
      "tags": [
        "external",
        "url",
        "hardcoded"
      ],
      "remediation": "Replace with env var process.env.API_URL or use internal proxy",
      "evidence": {
        "match": "http://10.0.0.5:3000",
        "regex": "https?://[\\w\\.-/:?=&%+#]+"
      }
    },
    {
      "id": "localip-examples\\local_ip_example.js-1-192.168.1.100",
      "type": "local_ip",
      "detector_id": "local_ip_v1",
      "file": "examples\\local_ip_example.js",
      "line": 1,
      "column": 29,
      "severity": "low",
      "confidence": 0.8,
      "detail": "Detected hardcoded local or private IP: 192.168.1.100",
      "context": {
        "snippet": "const internalApi = 'http://192.168.1.100/api';",
        "pre": "",
        "post": "const devServer = 'http://10.0.0.5:3000';"
      },
      "tags": [
        "local",
        "internal",
        "ip",
        "hardcoded"
      ],
      "remediation": "Avoid hardcoded private IPs; use service discovery or environment-based configuration.",
      "evidence": {
        "match": "192.168.1.100",
        "regex": "(10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|192\\.168\\.\\d{1,3}\\.\\d{1,3}|172\\.(1[6-9]|2[0-9]|3[0-1])\\.\\d{1,3}\\.\\d{1,3})"
      }
    },
    {
      "id": "localip-examples\\local_ip_example.js-2-10.0.0.5",
      "type": "local_ip",
      "detector_id": "local_ip_v1",
      "file": "examples\\local_ip_example.js",
      "line": 2,
      "column": 27,
      "severity": "low",
      "confidence": 0.8,
      "detail": "Detected hardcoded local or private IP: 10.0.0.5",
      "context": {
        "snippet": "const devServer = 'http://10.0.0.5:3000';",
        "pre": "const internalApi = 'http://192.168.1.100/api';",
        "post": ""
      },
      "tags": [
        "local",
        "internal",
        "ip",
        "hardcoded"
      ],
      "remediation": "Avoid hardcoded private IPs; use service discovery or environment-based configuration.",
      "evidence": {
        "match": "10.0.0.5",
        "regex": "(10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|192\\.168\\.\\d{1,3}\\.\\d{1,3}|172\\.(1[6-9]|2[0-9]|3[0-1])\\.\\d{1,3}\\.\\d{1,3})"
      }
    },
    {
      "id": "websocket-examples\\websocket.js-1-new WebSocket",
      "type": "websocket_usage",
      "detector_id": "websocket_v1",
      "file": "examples\\websocket.js",
      "line": 1,
      "column": 16,
      "severity": "medium",
      "confidence": 0.8,
      "detail": "Detected WebSocket usage: new WebSocket",
      "context": {
        "snippet": "const socket = new WebSocket('wss://socket.example.com');",
        "pre": "",
        "post": ""
      },
      "tags": [
        "network",
        "websocket",
        "realtime"
      ],
      "remediation": "Review WebSocket endpoints for security. Ensure proper authentication and authorization.",
      "evidence": {
        "match": "new WebSocket",
        "regex": "new WebSocket"
      }
    }
  ],
  "metadata": {
    "scanner_version": "0.1.0",
    "detectors_loaded": [
      "certificate_check_v1",
      "cors_policy_v1",
      "env_endpoint_v1",
      "grpc_v1",
      "hardcoded_url_v1",
      "http_call_v1",
      "local_ip_v1",
      "port_exposure_v1",
      "raw_socket_v1",
      "third_party_sdk_v1",
      "websocket_v1"
    ],
    "ruleset": "rulesets/default.yaml"
  }
}