{
  "scan_timestamp": "2025-10-16T03:40:15.169150Z",
  "scan_path": "example-repo",
  "total_files_scanned": 14,
  "findings": [
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 5,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "start",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 6,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "debugger",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 7,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "end",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 10,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "true",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 12,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "false",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 17,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "clear",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 21,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "timeStart",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 23,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "timeEnd",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 26,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "innerHTML",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 31,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "log",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 32,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "log",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 34,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "stack",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 36,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "return",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 44,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "innerHTML",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 49,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "data",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 49,
      "obfuscation_type": "base64_strings",
      "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
      "severity": "medium",
      "evidence": "eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9uZSJ9",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 52,
      "obfuscation_type": "base64_strings",
      "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
      "severity": "medium",
      "evidence": "dmFyIGQ9bmV3IERhdGUoKTt2b2lkIDB8fChkLmdldFRpbWUoKS1kPjE1MD8oZG9jdW1lbnQuYm9keS5pbm5lckhUTUw9J0RlYnVn",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 52,
      "obfuscation_type": "eval_usage",
      "description": "Found usage of the eval() function, which executes arbitrary JavaScript code from a string. This is extremely dangerous as it allows dynamic code execution that can be controlled by external inputs. Eval is commonly used in obfuscated malware to hide malicious payloads and bypass static analysis. It's considered a major security risk and should never be used in production code.",
      "severity": "high",
      "evidence": "eval(",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 52,
      "obfuscation_type": "encoded_urls",
      "description": "Potentially encoded URLs or data",
      "severity": "medium",
      "evidence": "dmFyIGQ9bmV3IERhdGUoKTt2b2lkIDB8fChkLmdldFRpbWUoKS1kPjE1MD8oZG9jdW1lbnQuYm9keS5pbm5lckhUTUw9J0RlYnVn",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 52,
      "obfuscation_type": "suspicious_eval_patterns",
      "description": "Found the dangerous combination of eval() and atob() - where base64-encoded data is being decoded and then executed as JavaScript code. This is a classic deobfuscation technique used by malware to hide its true payload. The base64 encoding conceals the malicious code from static analysis, and eval() brings it to life at runtime. This pattern is almost always malicious.",
      "severity": "high",
      "evidence": "eval(atob(",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 52,
      "obfuscation_type": "high_entropy_string",
      "description": "Found a string with very high information entropy (5.40 bits per character), which is unusual for human-readable text. Normal English text has entropy around 2.5-3.5, while compressed or encrypted data can reach 5.0+. This suggests the string contains encoded, compressed, or encrypted content that appears random to hide its true meaning. Malware commonly uses such techniques to conceal command strings, URLs, or executable code from casual inspection.",
      "severity": "medium",
      "evidence": "dmFyIGQ9bmV3IERhdGUoKTt2b2lkIDB8fChkLmdldFRpbWUoKS...",
      "confidence": 0.9001868315175147
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 0,
      "obfuscation_type": "anti_debugging",
      "description": "Potential anti-debugging code detected",
      "severity": "high",
      "evidence": "debugger statements found",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\anti-debugging.js",
      "line_number": 0,
      "obfuscation_type": "packed_code",
      "description": "Potential packed/encrypted code (eval with base64)",
      "severity": "high",
      "evidence": "eval() with base64 encoding detected",
      "confidence": 0.9
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 4,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x1a2b",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 5,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x3c4d",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 6,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x1a2b",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 27,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "startTime",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 28,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "debugger",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 31,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "payload",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 31,
      "obfuscation_type": "base64_strings",
      "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
      "severity": "medium",
      "evidence": "Y29uc29sZS5sb2coJ01hbHdhcmUgZXhlY3V0ZWQhJyk7",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 32,
      "obfuscation_type": "eval_usage",
      "description": "Found usage of the eval() function, which executes arbitrary JavaScript code from a string. This is extremely dangerous as it allows dynamic code execution that can be controlled by external inputs. Eval is commonly used in obfuscated malware to hide malicious payloads and bypass static analysis. It's considered a major security risk and should never be used in production code.",
      "severity": "high",
      "evidence": "eval(",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 36,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "allowed",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 39,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "return",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 43,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "encrypted",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 43,
      "obfuscation_type": "base64_strings",
      "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
      "severity": "medium",
      "evidence": "dmFyIG1hbHdhcmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuICJ0aGlzIGlzIGEgbWFsd2FyZSI7IH07IG1hbHdhcmUoKTs=",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 43,
      "obfuscation_type": "encoded_urls",
      "description": "Potentially encoded URLs or data",
      "severity": "medium",
      "evidence": "dmFyIG1hbHdhcmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuICJ0aGlzIGlzIGEgbWFsd2FyZSI7IH07IG1hbHdhcmUoKTs",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 44,
      "obfuscation_type": "eval_usage",
      "description": "Found usage of the eval() function, which executes arbitrary JavaScript code from a string. This is extremely dangerous as it allows dynamic code execution that can be controlled by external inputs. Eval is commonly used in obfuscated malware to hide malicious payloads and bypass static analysis. It's considered a major security risk and should never be used in production code.",
      "severity": "high",
      "evidence": "eval(",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 44,
      "obfuscation_type": "suspicious_eval_patterns",
      "description": "Found the dangerous combination of eval() and atob() - where base64-encoded data is being decoded and then executed as JavaScript code. This is a classic deobfuscation technique used by malware to hide its true payload. The base64 encoding conceals the malicious code from static analysis, and eval() brings it to life at runtime. This pattern is almost always malicious.",
      "severity": "high",
      "evidence": "eval(atob(",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 47,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "selfMod",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 50,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "selfMod",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 59,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "i",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 59,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "i",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 69,
      "obfuscation_type": "char_code_strings",
      "description": "Identified String.fromCharCode() being called with a very long list of numeric arguments. This function converts ASCII character codes back to readable text. Malware often uses this to hide strings by representing them as arrays of numbers, making the malicious content invisible to casual inspection. The long argument list suggests substantial hidden content that could be command strings, URLs, or executable code.",
      "severity": "high",
      "evidence": "String.fromCharCode(77, 97, 108, 119, 97, 114, 101)",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 71,
      "obfuscation_type": "obfuscated_vars",
      "description": "Identified variable names combining short letters with numbers (like 'a1', 'x2', 'b10'). This naming pattern is characteristic of code that has been automatically minified or obfuscated, making it difficult for humans to understand variable purposes and relationships.",
      "severity": "low",
      "evidence": "x61",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 71,
      "obfuscation_type": "hex_strings",
      "description": "Found hexadecimal escape sequences (\\xXX format) in strings. These are used to represent characters by their ASCII/hexadecimal values. While occasionally legitimate for encoding special characters, patterns of hex escapes often indicate attempts to obscure readable text or hide malicious payloads by making them appear as binary data rather than human-readable strings.",
      "severity": "medium",
      "evidence": "\\x4d",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 87,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "default",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 92,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "exports",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 31,
      "obfuscation_type": "high_entropy_string",
      "description": "Found a string with very high information entropy (4.68 bits per character), which is unusual for human-readable text. Normal English text has entropy around 2.5-3.5, while compressed or encrypted data can reach 5.0+. This suggests the string contains encoded, compressed, or encrypted content that appears random to hide its true meaning. Malware commonly uses such techniques to conceal command strings, URLs, or executable code from casual inspection.",
      "severity": "medium",
      "evidence": "Y29uc29sZS5sb2coJ01hbHdhcmUgZXhlY3V0ZWQhJyk7",
      "confidence": 0.7801148814907221
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 43,
      "obfuscation_type": "high_entropy_string",
      "description": "Found a string with very high information entropy (4.97 bits per character), which is unusual for human-readable text. Normal English text has entropy around 2.5-3.5, while compressed or encrypted data can reach 5.0+. This suggests the string contains encoded, compressed, or encrypted content that appears random to hide its true meaning. Malware commonly uses such techniques to conceal command strings, URLs, or executable code from casual inspection.",
      "severity": "medium",
      "evidence": "dmFyIG1hbHdhcmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuICJ0aG...",
      "confidence": 0.829026019045763
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 0,
      "obfuscation_type": "anti_debugging",
      "description": "Potential anti-debugging code detected",
      "severity": "high",
      "evidence": "debugger statements found",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\comprehensive-malware.js",
      "line_number": 0,
      "obfuscation_type": "packed_code",
      "description": "Potential packed/encrypted code (eval with base64)",
      "severity": "high",
      "evidence": "eval() with base64 encoding detected",
      "confidence": 0.9
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 5,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 6,
      "obfuscation_type": "always_false",
      "description": "Found an 'if (false)' condition that will never execute. This creates dead code - sections of the program that can never be reached during normal execution. While sometimes used for debugging or feature toggles, this pattern is commonly employed in obfuscated code to confuse analysis tools and make the code appear more complex than it actually is.",
      "severity": "medium",
      "evidence": "if (false)",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 7,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 10,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 11,
      "obfuscation_type": "always_true",
      "description": "Detected an 'if (true)' condition that is always true. This creates unnecessary conditional logic that doesn't actually branch. While occasionally used for code organization, this pattern often indicates attempts to make the code appear more complex or to prepare for future obfuscation transformations that would make the condition more complex.",
      "severity": "low",
      "evidence": "if (true)",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 12,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 16,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "unused",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 19,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 24,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "condition",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 33,
      "obfuscation_type": "base64_strings",
      "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
      "severity": "medium",
      "evidence": "flattenedControlFlow",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 34,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 35,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 41,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 43,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 45,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "break",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 47,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 48,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 49,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "break",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 51,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 52,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 53,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "break",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 55,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 61,
      "obfuscation_type": "base64_strings",
      "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
      "severity": "medium",
      "evidence": "exceptionControlFlow",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 65,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "e",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 65,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "e",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 73,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 74,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "i",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 74,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "i",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 75,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "continue",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 76,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "break",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 78,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "i",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 78,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "i",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 81,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "temp",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 84,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 92,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "z",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 92,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "z",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 93,
      "obfuscation_type": "always_false",
      "description": "Found an 'if (false)' condition that will never execute. This creates dead code - sections of the program that can never be reached during normal execution. While sometimes used for debugging or feature toggles, this pattern is commonly employed in obfuscated code to confuse analysis tools and make the code appear more complex than it actually is.",
      "severity": "medium",
      "evidence": "if (false)",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 94,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "y",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 94,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "y",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 97,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "x",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 97,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "x",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 99,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "PI",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 102,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "z",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 102,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "z",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 107,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "i",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 107,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "i",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 108,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "start",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 112,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "start",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 118,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 119,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 124,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 125,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "break",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 127,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 128,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 129,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "break",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 132,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 134,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 136,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "break",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 138,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 139,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 140,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "break",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 142,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 143,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "break",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 144,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "default",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 145,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.js",
      "line_number": 148,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 5,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 6,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "False",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 7,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 9,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 10,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "True",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 11,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 14,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "unused",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 20,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "condition",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 21,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "condition",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 23,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "else",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 28,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 29,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 31,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "True",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 32,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 34,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 35,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "else",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 36,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 37,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 38,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 39,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 40,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 41,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 42,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 43,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 48,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "try",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 50,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "e",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 50,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "e",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 60,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "False",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 70,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 78,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "else",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 80,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "temp",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 85,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 86,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 89,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 90,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 91,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 92,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 93,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 94,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 96,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 97,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "else",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 98,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 99,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 100,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 101,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 102,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 103,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 104,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "else",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 105,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "state",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 110,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "path",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 113,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "path",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 115,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "path",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 117,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "else",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 123,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "False",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 133,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "False",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\control-flow-obfuscation.py",
      "line_number": 138,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "False",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\minified.js",
      "line_number": 1,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "a",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\minified.js",
      "line_number": 1,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "a",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\minified.js",
      "line_number": 1,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "data",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\minified.js",
      "line_number": 0,
      "obfuscation_type": "predominantly_short_names",
      "description": "This file uses an unusually high proportion of very short variable/function names. Out of 14 total identifiers, 12 (85.7%) are only 1-3 characters long. While some short names are acceptable (like 'i' for loop counters), this extreme ratio suggests systematic obfuscation where meaningful names have been replaced with cryptic abbreviations to make the code harder to understand and maintain.",
      "severity": "medium",
      "evidence": "Short names: 12/14 (85.7%)",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\normal.py",
      "line_number": 11,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "Args",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\normal.py",
      "line_number": 14,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "Returns",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\normal.py",
      "line_number": 15,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "float",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\normal.py",
      "line_number": 17,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "total",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\normal.py",
      "line_number": 18,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "numbers",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\normal.py",
      "line_number": 25,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.js",
      "line_number": 2,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "a",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.js",
      "line_number": 2,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "a",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.js",
      "line_number": 2,
      "obfuscation_type": "minified_code",
      "description": "Multiple assignments on one line (minification pattern)",
      "severity": "medium",
      "evidence": "a=b=>b*a;a=10;",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.js",
      "line_number": 5,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "hexString",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.js",
      "line_number": 5,
      "obfuscation_type": "obfuscated_vars",
      "description": "Identified variable names combining short letters with numbers (like 'a1', 'x2', 'b10'). This naming pattern is characteristic of code that has been automatically minified or obfuscated, making it difficult for humans to understand variable purposes and relationships.",
      "severity": "low",
      "evidence": "x48",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.js",
      "line_number": 5,
      "obfuscation_type": "hex_strings",
      "description": "Found hexadecimal escape sequences (\\xXX format) in strings. These are used to represent characters by their ASCII/hexadecimal values. While occasionally legitimate for encoding special characters, patterns of hex escapes often indicate attempts to obscure readable text or hide malicious payloads by making them appear as binary data rather than human-readable strings.",
      "severity": "medium",
      "evidence": "\\x48",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.js",
      "line_number": 7,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "x",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.js",
      "line_number": 7,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "x",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.js",
      "line_number": 7,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "another",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.py",
      "line_number": 2,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "a",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.py",
      "line_number": 2,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "a",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.py",
      "line_number": 2,
      "obfuscation_type": "minified_code",
      "description": "Multiple assignments on one line (minification pattern)",
      "severity": "medium",
      "evidence": "a=b=c=1;d=a+b+c;",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.py",
      "line_number": 5,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.py",
      "line_number": 8,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "encoded",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.py",
      "line_number": 11,
      "obfuscation_type": "obfuscated_vars",
      "description": "Identified variable names combining short letters with numbers (like 'a1', 'x2', 'b10'). This naming pattern is characteristic of code that has been automatically minified or obfuscated, making it difficult for humans to understand variable purposes and relationships.",
      "severity": "low",
      "evidence": "x48",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.py",
      "line_number": 11,
      "obfuscation_type": "hex_strings",
      "description": "Found hexadecimal escape sequences (\\xXX format) in strings. These are used to represent characters by their ASCII/hexadecimal values. While occasionally legitimate for encoding special characters, patterns of hex escapes often indicate attempts to obscure readable text or hide malicious payloads by making them appear as binary data rather than human-readable strings.",
      "severity": "medium",
      "evidence": "\\x48",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.py",
      "line_number": 14,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "C",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.py",
      "line_number": 14,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "C",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscated.py",
      "line_number": 0,
      "obfuscation_type": "syntax_error",
      "description": "File contains syntax errors (potential obfuscation)",
      "severity": "medium",
      "evidence": "AST parsing failed",
      "confidence": 0.7
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 2,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x5a2c",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 3,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x3b2c",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 4,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x4b5d",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 5,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x4b5d",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 8,
      "obfuscation_type": "hex_strings",
      "description": "Found hexadecimal escape sequences (\\xXX format) in strings. These are used to represent characters by their ASCII/hexadecimal values. While occasionally legitimate for encoding special characters, patterns of hex escapes often indicate attempts to obscure readable text or hide malicious payloads by making them appear as binary data rather than human-readable strings.",
      "severity": "medium",
      "evidence": "\\x20",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 8,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x2f1a",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 9,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x4e5f",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 10,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x1c8d",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 11,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x5f2e",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 12,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x4e5f",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 15,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x1c8d",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 16,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x2f1a",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 18,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x4d2f",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 19,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x1f4a",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 20,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x2e8f",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 21,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x2e8f",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\obfuscator-io-example.js",
      "line_number": 24,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x4d2f",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 2,
      "obfuscation_type": "base64_strings",
      "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
      "severity": "medium",
      "evidence": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 2,
      "obfuscation_type": "encoded_urls",
      "description": "Potentially encoded URLs or data",
      "severity": "medium",
      "evidence": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 2,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x4e5f",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 3,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x2b3c",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 4,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x5f2e",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 5,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x4d2f",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 6,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x2b3c",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 9,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x5f2e",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 10,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x4e5f",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 12,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x1f4a",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 13,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x3c5b",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 14,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x5a2c",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 15,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x5a2c",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 18,
      "obfuscation_type": "base64_strings",
      "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
      "severity": "medium",
      "evidence": "dmFyIGhlbGxvID0gIkhlbGxvIFdvcmxkIjsgY29uc29sZS5sb2cocGVsbG8pOw==",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 18,
      "obfuscation_type": "encoded_urls",
      "description": "Potentially encoded URLs or data",
      "severity": "medium",
      "evidence": "dmFyIGhlbGxvID0gIkhlbGxvIFdvcmxkIjsgY29uc29sZS5sb2cocGVsbG8pOw",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 19,
      "obfuscation_type": "eval_usage",
      "description": "Found usage of the eval() function, which executes arbitrary JavaScript code from a string. This is extremely dangerous as it allows dynamic code execution that can be controlled by external inputs. Eval is commonly used in obfuscated malware to hide malicious payloads and bypass static analysis. It's considered a major security risk and should never be used in production code.",
      "severity": "high",
      "evidence": "eval(",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 19,
      "obfuscation_type": "suspicious_eval_patterns",
      "description": "Found the dangerous combination of eval() and atob() - where base64-encoded data is being decoded and then executed as JavaScript code. This is a classic deobfuscation technique used by malware to hide its true payload. The base64 encoding conceals the malicious code from static analysis, and eval() brings it to life at runtime. This pattern is almost always malicious.",
      "severity": "high",
      "evidence": "eval(atob(",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 22,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "packed",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 23,
      "obfuscation_type": "eval_usage",
      "description": "Found usage of the eval() function, which executes arbitrary JavaScript code from a string. This is extremely dangerous as it allows dynamic code execution that can be controlled by external inputs. Eval is commonly used in obfuscated malware to hide malicious payloads and bypass static analysis. It's considered a major security risk and should never be used in production code.",
      "severity": "high",
      "evidence": "eval(",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 26,
      "obfuscation_type": "base64_strings",
      "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
      "severity": "medium",
      "evidence": "ZnVuY3Rpb24gc2F5SGVsbG8oKSB7IGNvbnNvbGUubG9nKCJIZWxsbyBmcm9tIGVuY29kZWQgZnVuY3Rpb24iKTsgfSBzYXlIZWxs",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 26,
      "obfuscation_type": "encoded_urls",
      "description": "Potentially encoded URLs or data",
      "severity": "medium",
      "evidence": "ZnVuY3Rpb24gc2F5SGVsbG8oKSB7IGNvbnNvbGUubG9nKCJIZWxsbyBmcm9tIGVuY29kZWQgZnVuY3Rpb24iKTsgfSBzYXlIZWxs",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 27,
      "obfuscation_type": "eval_usage",
      "description": "Found usage of the eval() function, which executes arbitrary JavaScript code from a string. This is extremely dangerous as it allows dynamic code execution that can be controlled by external inputs. Eval is commonly used in obfuscated malware to hide malicious payloads and bypass static analysis. It's considered a major security risk and should never be used in production code.",
      "severity": "high",
      "evidence": "eval(",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 27,
      "obfuscation_type": "suspicious_eval_patterns",
      "description": "Found the dangerous combination of eval() and atob() - where base64-encoded data is being decoded and then executed as JavaScript code. This is a classic deobfuscation technique used by malware to hide its true payload. The base64 encoding conceals the malicious code from static analysis, and eval() brings it to life at runtime. This pattern is almost always malicious.",
      "severity": "high",
      "evidence": "eval(atob(",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 2,
      "obfuscation_type": "high_entropy_string",
      "description": "Found a string with very high information entropy (6.02 bits per character), which is unusual for human-readable text. Normal English text has entropy around 2.5-3.5, while compressed or encrypted data can reach 5.0+. This suggests the string contains encoded, compressed, or encrypted content that appears random to hide its true meaning. Malware commonly uses such techniques to conceal command strings, URLs, or executable code from casual inspection.",
      "severity": "medium",
      "evidence": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwx...",
      "confidence": 1.0
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 18,
      "obfuscation_type": "high_entropy_string",
      "description": "Found a string with very high information entropy (4.76 bits per character), which is unusual for human-readable text. Normal English text has entropy around 2.5-3.5, while compressed or encrypted data can reach 5.0+. This suggests the string contains encoded, compressed, or encrypted content that appears random to hide its true meaning. Malware commonly uses such techniques to conceal command strings, URLs, or executable code from casual inspection.",
      "severity": "medium",
      "evidence": "dmFyIGhlbGxvID0gIkhlbGxvIFdvcmxkIjsgY29uc29sZS5sb2...",
      "confidence": 0.7930105639183228
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 26,
      "obfuscation_type": "high_entropy_string",
      "description": "Found a string with very high information entropy (5.24 bits per character), which is unusual for human-readable text. Normal English text has entropy around 2.5-3.5, while compressed or encrypted data can reach 5.0+. This suggests the string contains encoded, compressed, or encrypted content that appears random to hide its true meaning. Malware commonly uses such techniques to conceal command strings, URLs, or executable code from casual inspection.",
      "severity": "medium",
      "evidence": "ZnVuY3Rpb24gc2F5SGVsbG8oKSB7IGNvbnNvbGUubG9nKCJIZW...",
      "confidence": 0.873270231083194
    },
    {
      "file_path": "example-repo\\packed-code.js",
      "line_number": 0,
      "obfuscation_type": "packed_code",
      "description": "Potential packed/encrypted code (eval with base64)",
      "severity": "high",
      "evidence": "eval() with base64 encoding detected",
      "confidence": 0.9
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 4,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "code",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 5,
      "obfuscation_type": "eval_usage",
      "description": "Found usage of the eval() function, which executes arbitrary JavaScript code from a string. This is extremely dangerous as it allows dynamic code execution that can be controlled by external inputs. Eval is commonly used in obfuscated malware to hide malicious payloads and bypass static analysis. It's considered a major security risk and should never be used in production code.",
      "severity": "high",
      "evidence": "eval(",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 8,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "b",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 8,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "b",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 8,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "func",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 8,
      "obfuscation_type": "function_constructor",
      "description": "Detected dynamic function creation using the Function constructor. This allows creating functions from strings at runtime, similar to eval(). While it can be useful for dynamic code generation, it's often abused by obfuscated malware to hide function logic and payloads. This makes it impossible to statically analyze what the function actually does.",
      "severity": "high",
      "evidence": "new Function(",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 11,
      "obfuscation_type": "base64_strings",
      "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
      "severity": "medium",
      "evidence": "setTimeout/setInterval",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 12,
      "obfuscation_type": "setTimeout_string",
      "description": "Found setTimeout being called with a string parameter instead of a function. This causes JavaScript to evaluate the string as code using eval(), which is a security risk. Legitimate code should pass function references instead of strings. This pattern is commonly used in obfuscated code to delay execution of malicious payloads.",
      "severity": "medium",
      "evidence": "setTimeout(\"",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 16,
      "obfuscation_type": "function_constructor",
      "description": "Detected dynamic function creation using the Function constructor. This allows creating functions from strings at runtime, similar to eval(). While it can be useful for dynamic code generation, it's often abused by obfuscated malware to hide function logic and payloads. This makes it impossible to statically analyze what the function actually does.",
      "severity": "high",
      "evidence": "new Function(",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 22,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "obj",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 22,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "secret",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 23,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "prop",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 28,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "modules",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 29,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "b",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 29,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "add",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 30,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "upper",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 34,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "math",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 38,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "require",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 39,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "modules",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 40,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "readFile",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 41,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "hash",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 48,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 49,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "i",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 49,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "i",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 49,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "length",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 50,
      "obfuscation_type": "char_code_strings",
      "description": "Identified String.fromCharCode() being called with a very long list of numeric arguments. This function converts ASCII character codes back to readable text. Malware often uses this to hide strings by representing them as arrays of numbers, making the malicious content invisible to casual inspection. The long argument list suggests substantial hidden content that could be command strings, URLs, or executable code.",
      "severity": "high",
      "evidence": "String.fromCharCode(encrypted.charCodeAt(i)",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 52,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 54,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "encrypted",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 59,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "code",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 61,
      "obfuscation_type": "function_constructor",
      "description": "Detected dynamic function creation using the Function constructor. This allows creating functions from strings at runtime, similar to eval(). While it can be useful for dynamic code generation, it's often abused by obfuscated malware to hide function logic and payloads. This makes it impossible to statically analyze what the function actually does.",
      "severity": "high",
      "evidence": "new Function(",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 66,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "handler",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 67,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "get",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 71,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "prop",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 84,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "weakMap",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 85,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "key",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 91,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "template",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 93,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 95,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 97,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "generated",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 99,
      "obfuscation_type": "eval_usage",
      "description": "Found usage of the eval() function, which executes arbitrary JavaScript code from a string. This is extremely dangerous as it allows dynamic code execution that can be controlled by external inputs. Eval is commonly used in obfuscated malware to hide malicious payloads and bypass static analysis. It's considered a major security risk and should never be used in production code.",
      "severity": "high",
      "evidence": "eval(",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 102,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "operations",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\runtime-obfuscation.js",
      "line_number": 103,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "operations",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 4,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "encoded",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 5,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "decoded",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 9,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "hexString",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 9,
      "obfuscation_type": "obfuscated_vars",
      "description": "Identified variable names combining short letters with numbers (like 'a1', 'x2', 'b10'). This naming pattern is characteristic of code that has been automatically minified or obfuscated, making it difficult for humans to understand variable purposes and relationships.",
      "severity": "low",
      "evidence": "x48",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 9,
      "obfuscation_type": "hex_strings",
      "description": "Found hexadecimal escape sequences (\\xXX format) in strings. These are used to represent characters by their ASCII/hexadecimal values. While occasionally legitimate for encoding special characters, patterns of hex escapes often indicate attempts to obscure readable text or hide malicious payloads by making them appear as binary data rather than human-readable strings.",
      "severity": "medium",
      "evidence": "\\x48",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 13,
      "obfuscation_type": "octal_escapes",
      "description": "Detected octal escape sequences (\\XXX format where X is 0-7). These represent characters by their octal (base-8) ASCII values. While sometimes used for legitimate purposes like encoding control characters, this encoding method is often employed to make strings less readable and hide potentially malicious content from automated detection and human reviewers.",
      "severity": "medium",
      "evidence": "\\110",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 17,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "unicodeStr",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 17,
      "obfuscation_type": "obfuscated_vars",
      "description": "Identified variable names combining short letters with numbers (like 'a1', 'x2', 'b10'). This naming pattern is characteristic of code that has been automatically minified or obfuscated, making it difficult for humans to understand variable purposes and relationships.",
      "severity": "low",
      "evidence": "u0048",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 17,
      "obfuscation_type": "unicode_escapes",
      "description": "Identified Unicode escape sequences (\\uXXXX format) in the code. Unicode escapes can be legitimate for internationalization, but excessive use or unusual patterns may indicate attempts to hide readable text by representing it in a less obvious encoded format. This technique makes it harder to spot malicious strings during code review.",
      "severity": "medium",
      "evidence": "\\u0048",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 27,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "str",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 27,
      "obfuscation_type": "char_code_strings",
      "description": "Identified String.fromCharCode() being called with a very long list of numeric arguments. This function converts ASCII character codes back to readable text. Malware often uses this to hide strings by representing them as arrays of numbers, making the malicious content invisible to casual inspection. The long argument list suggests substantial hidden content that could be command strings, URLs, or executable code.",
      "severity": "high",
      "evidence": "String.fromCharCode(72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100)",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 31,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "a",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 31,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "a",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 35,
      "obfuscation_type": "base64_strings",
      "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
      "severity": "medium",
      "evidence": "XHg0OFx4NjVceDY0XHg2NFx4NjdceDIwXHg1N1x4NmZceDcyXHg2Y1x4NjQ=",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 35,
      "obfuscation_type": "encoded_urls",
      "description": "Potentially encoded URLs or data",
      "severity": "medium",
      "evidence": "XHg0OFx4NjVceDY0XHg2NFx4NjdceDIwXHg1N1x4NmZceDcyXHg2Y1x4NjQ",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 41,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "c",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 41,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "c",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 41,
      "obfuscation_type": "nested_ternary",
      "description": "Nested ternary operators",
      "severity": "low",
      "evidence": "? 90 : 122) >= (c = c.charCodeAt(0) + 13) ? c :",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 41,
      "obfuscation_type": "char_code_strings",
      "description": "Identified String.fromCharCode() being called with a very long list of numeric arguments. This function converts ASCII character codes back to readable text. Malware often uses this to hide strings by representing them as arrays of numbers, making the malicious content invisible to casual inspection. The long argument list suggests substantial hidden content that could be command strings, URLs, or executable code.",
      "severity": "high",
      "evidence": "String.fromCharCode((c <= \"Z\" ? 90 : 122)",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 48,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 49,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "i",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 49,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "i",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 49,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "length",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 52,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.js",
      "line_number": 54,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "xorStr",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 6,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "encoded",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 7,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "decoded",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 11,
      "obfuscation_type": "obfuscated_vars",
      "description": "Identified variable names combining short letters with numbers (like 'a1', 'x2', 'b10'). This naming pattern is characteristic of code that has been automatically minified or obfuscated, making it difficult for humans to understand variable purposes and relationships.",
      "severity": "low",
      "evidence": "x48",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 11,
      "obfuscation_type": "hex_strings",
      "description": "Found hexadecimal escape sequences (\\xXX format) in strings. These are used to represent characters by their ASCII/hexadecimal values. While occasionally legitimate for encoding special characters, patterns of hex escapes often indicate attempts to obscure readable text or hide malicious payloads by making them appear as binary data rather than human-readable strings.",
      "severity": "medium",
      "evidence": "\\x48",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 15,
      "obfuscation_type": "obfuscated_vars",
      "description": "Identified variable names combining short letters with numbers (like 'a1', 'x2', 'b10'). This naming pattern is characteristic of code that has been automatically minified or obfuscated, making it difficult for humans to understand variable purposes and relationships.",
      "severity": "low",
      "evidence": "u0048",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 15,
      "obfuscation_type": "unicode_escapes",
      "description": "Identified Unicode escape sequences (\\uXXXX format) in the code. Unicode escapes can be legitimate for internationalization, but excessive use or unusual patterns may indicate attempts to hide readable text by representing it in a less obvious encoded format. This technique makes it harder to spot malicious strings during code review.",
      "severity": "medium",
      "evidence": "\\u0048",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 25,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "chars",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 26,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 30,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "a",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 30,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "a",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 31,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "b",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 31,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "b",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 35,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "template",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 40,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "result",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 41,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "text",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 43,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "base",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\string-obfuscation.py",
      "line_number": 45,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "else",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 4,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "a",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 4,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "a",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 9,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "qwerty",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 10,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "asdfgh",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 11,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "zxcvbn",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 14,
      "obfuscation_type": "base64_strings",
      "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
      "severity": "medium",
      "evidence": "aBcDeFgHiJkLmNoPqRsTuVwXyZ",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 15,
      "obfuscation_type": "suspicious_hex",
      "description": "Very long hexadecimal numbers",
      "severity": "low",
      "evidence": "0x1a2b3c4d5e6f",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 15,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x1a2b3c4d5e6f",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 16,
      "obfuscation_type": "suspicious_hex",
      "description": "Very long hexadecimal numbers",
      "severity": "low",
      "evidence": "0x1a2b3c4d5e6f",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 16,
      "obfuscation_type": "obfuscated_function_names",
      "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
      "severity": "high",
      "evidence": "_0x1a2b3c4d5e6f",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 26,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "VaR",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 39,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "propA",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 40,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "propB",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 41,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "propC",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 43,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "propA",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 44,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "propB",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 45,
      "obfuscation_type": "random_vars",
      "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
      "severity": "medium",
      "evidence": "propC",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 58,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "x",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 58,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "x",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 59,
      "obfuscation_type": "always_true",
      "description": "Detected an 'if (true)' condition that is always true. This creates unnecessary conditional logic that doesn't actually branch. While occasionally used for code organization, this pattern often indicates attempts to make the code appear more complex or to prepare for future obfuscation transformations that would make the condition more complex.",
      "severity": "low",
      "evidence": "if (true)",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 60,
      "obfuscation_type": "single_char_vars",
      "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
      "severity": "low",
      "evidence": "x",
      "confidence": 0.8
    },
    {
      "file_path": "example-repo\\variable-obfuscation.js",
      "line_number": 60,
      "obfuscation_type": "short_meaningless_vars",
      "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
      "severity": "low",
      "evidence": "x",
      "confidence": 0.8
    }
  ],
  "summary": {
    "high_severity": 56,
    "medium_severity": 222,
    "low_severity": 74,
    "total_findings": 352,
    "average_confidence": 0.802,
    "risk_score": 550.25,
    "categories": {
      "variable_obfuscation": 251,
      "string_obfuscation": 21,
      "runtime_obfuscation": 12,
      "suspicious_patterns": 8,
      "malware_signatures": 40,
      "unknown": 13,
      "control_flow_obfuscation": 4,
      "structure_obfuscation": 3
    }
  },
  "risk_assessment": "CRITICAL: High likelihood of malicious obfuscation"
}