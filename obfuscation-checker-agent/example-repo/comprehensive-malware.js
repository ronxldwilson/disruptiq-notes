// Comprehensive malware simulation - combining multiple techniques

// 1. Obfuscator.io style with anti-debugging
var _0x1a2b = function(_0x3c4d, _0x5e6f) {
    _0x3c4d = _0x3c4d - 0x0;
    var _0x7g8h = _0x1a2b[_0x3c4d];
    return _0x7g8h;
};

var _0x9i0j = ['debugger', 'void', 'function', 'eval', 'atob', 'console', 'log', 'Malware detected and executed'];
(function(_0x2k3l, _0x4m5n) {
    var _0x6o7p = function(_0x8q9r) {
        while (--_0x8q9r) {
            _0x2k3l['push'](_0x2k3l['shift']());
        }
    };
    _0x6o7p(++_0x4m5n);
}(_0x9i0j, 0x1b3));

var _0x1s2t = function(_0x3u4v, _0x5w6x) {
    _0x3u4v = _0x3u4v - 0x0;
    var _0x7y8z = _0x9i0j[_0x3u4v];
    return _0x7y8z;
};

// 2. Anti-debugging with timing attacks
var startTime = new Date();
debugger; // Will pause if dev tools open
if (new Date() - startTime > 50) {
    // Debugging detected - execute payload
    var payload = atob("Y29uc29sZS5sb2coJ01hbHdhcmUgZXhlY3V0ZWQhJyk7");
    eval(payload);
}

// 3. Domain locking
var allowed = ['evil.com', 'malicious.net'];
if (allowed.indexOf(location.hostname) === -1) {
    // Only run on allowed domains
    return;
}

// 4. Packed malicious code
var encrypted = "dmFyIG1hbHdhcmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuICJ0aGlzIGlzIGEgbWFsd2FyZSI7IH07IG1hbHdhcmUoKTs=";
eval(atob(encrypted));

// 5. Self-modifying code
var selfMod = function() {
    console.log('Initial execution');
    // Modify itself
    selfMod = function() {
        console.log('Modified execution - malware persistence');
        return 'malware_active';
    };
};
selfMod(); // First call
selfMod(); // Second call - different behavior

// 6. Timing-based obfuscation with multiple setTimeout calls
for (var i = 0; i < 20; i++) {
    setTimeout(function() {
        // Delayed malicious actions
        if (Math.random() > 0.95) {
            console.log('Random malware trigger');
        }
    }, Math.random() * 10000);
}

// 7. String obfuscation with multiple encodings
var str1 = String.fromCharCode(77, 97, 108, 119, 97, 114, 101); // "Malware"
var str2 = atob("TWFsd2FyZQ=="); // Same string, base64
var str3 = "\x4d\x61\x6c\x77\x61\x72\x65"; // Hex encoded
console.log(str1, str2, str3);

// 8. Dead code with opaque predicates
if (Math.PI * 2 === 6.283185307179586) { // Always true
    console.log('This always executes');
} else {
    console.log('This never executes'); // Dead code
}

// 9. Control flow flattening simulation
function malwareDispatcher(state) {
    switch(state) {
        case 0: console.log('Malware stage 1'); return 1;
        case 1: console.log('Malware stage 2'); return 2;
        case 2: console.log('Malware stage 3 - final'); return 'complete';
        default: return 'error';
    }
}

// 10. Export obfuscation
var exports = {
    'm4lw4r3': function() { return 'malware_function'; },
    '_mAlWaRe_': function() { return 'another_malware'; }
};
