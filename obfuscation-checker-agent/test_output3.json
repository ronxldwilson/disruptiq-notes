{
  "scan_timestamp": "2025-10-22T18:18:03.826097Z",
  "scan_path": "example-repo",
  "total_files_scanned": 14,
  "findings": [
    {
        "id": 1,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 5,
        "obfuscation_type": "timing_checks",
        "description": "Timing measurements that could be used for anti-analysis techniques. Code that checks execution time might be trying to detect if it's running in a debugger or analysis environment.",
        "severity": "medium",
        "evidence": "new Date()",
        "confidence": 0.8,
        "full_line": "    var start = new Date();",
        "category": "anti_analysis"
    },
    {
        "id": 2,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 7,
        "obfuscation_type": "timing_checks",
        "description": "Timing measurements that could be used for anti-analysis techniques. Code that checks execution time might be trying to detect if it's running in a debugger or analysis environment.",
        "severity": "medium",
        "evidence": "new Date()",
        "confidence": 0.8,
        "full_line": "    var end = new Date();",
        "category": "anti_analysis"
    },
    {
        "id": 3,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 17,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "clear",
        "confidence": 0.8,
        "full_line": "    console.clear = function() { return; }; // Disable console.clear",
        "category": "variable_obfuscation"
    },
    {
        "id": 4,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 17,
        "obfuscation_type": "function_rebinding",
        "description": "Function properties being reassigned to new function expressions. This dynamic function rebinding makes it impossible to statically analyze what functions are actually called, creating uncertainty in the program's behavior.",
        "severity": "medium",
        "evidence": ".clear = function",
        "confidence": 0.8,
        "full_line": "    console.clear = function() { return; }; // Disable console.clear",
        "category": "runtime_obfuscation"
    },
    {
        "id": 5,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 21,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "timeStart",
        "confidence": 0.8,
        "full_line": "var timeStart = performance.now();",
        "category": "variable_obfuscation"
    },
    {
        "id": 6,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 21,
        "obfuscation_type": "timing_checks",
        "description": "Timing measurements that could be used for anti-analysis techniques. Code that checks execution time might be trying to detect if it's running in a debugger or analysis environment.",
        "severity": "medium",
        "evidence": "performance.now()",
        "confidence": 0.8,
        "full_line": "var timeStart = performance.now();",
        "category": "anti_analysis"
    },
    {
        "id": 7,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 23,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "timeEnd",
        "confidence": 0.8,
        "full_line": "    var timeEnd = performance.now();",
        "category": "variable_obfuscation"
    },
    {
        "id": 8,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 23,
        "obfuscation_type": "timing_checks",
        "description": "Timing measurements that could be used for anti-analysis techniques. Code that checks execution time might be trying to detect if it's running in a debugger or analysis environment.",
        "severity": "medium",
        "evidence": "performance.now()",
        "confidence": 0.8,
        "full_line": "    var timeEnd = performance.now();",
        "category": "anti_analysis"
    },
    {
        "id": 9,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 26,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "innerHTML",
        "confidence": 0.8,
        "full_line": "        document.body.innerHTML = \"Debugging detected\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 10,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 31,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "log",
        "confidence": 0.8,
        "full_line": "var originalLog = console.log;",
        "category": "variable_obfuscation"
    },
    {
        "id": 11,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 32,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "log",
        "confidence": 0.8,
        "full_line": "console.log = function() {",
        "category": "variable_obfuscation"
    },
    {
        "id": 12,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 32,
        "obfuscation_type": "function_rebinding",
        "description": "Function properties being reassigned to new function expressions. This dynamic function rebinding makes it impossible to statically analyze what functions are actually called, creating uncertainty in the program's behavior.",
        "severity": "medium",
        "evidence": ".log = function",
        "confidence": 0.8,
        "full_line": "console.log = function() {",
        "category": "runtime_obfuscation"
    },
    {
        "id": 13,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 34,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "stack (+1 more)",
        "confidence": 0.9,
        "full_line": "    var stack = new Error().stack;",
        "category": "variable_obfuscation"
    },
    {
        "id": 14,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 44,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "innerHTML",
        "confidence": 0.8,
        "full_line": "    document.body.innerHTML = \"Access denied\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 15,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 52,
        "obfuscation_type": "base64_strings",
        "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
        "severity": "medium",
        "evidence": "dmFyIGQ9bmV3IERhdGUoKTt2b2lkIDB8fChkLmdldFRpbWUoKS1kPjE1MD8oZG9jdW1lbnQuYm9keS5pbm5lckhUTUw9J0RlYnVn",
        "confidence": 0.8,
        "full_line": "eval(atob(\"dmFyIGQ9bmV3IERhdGUoKTt2b2lkIDB8fChkLmdldFRpbWUoKS1kPjE1MD8oZG9jdW1lbnQuYm9keS5pbm5lckhUTUw9J0RlYnVnZ2luZyBkZXRlY3RlZCcsc3RvcCgpKTp2b2lkIDA=\"));",
        "category": "string_obfuscation"
    },
    {
        "id": 16,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 52,
        "obfuscation_type": "eval_usage",
        "description": "Found usage of the eval() function, which executes arbitrary JavaScript code from a string. This is extremely dangerous as it allows dynamic code execution that can be controlled by external inputs. Eval is commonly used in obfuscated malware to hide malicious payloads and bypass static analysis. It's considered a major security risk and should never be used in production code.",
        "severity": "high",
        "evidence": "eval(",
        "confidence": 0.8,
        "full_line": "eval(atob(\"dmFyIGQ9bmV3IERhdGUoKTt2b2lkIDB8fChkLmdldFRpbWUoKS1kPjE1MD8oZG9jdW1lbnQuYm9keS5pbm5lckhUTUw9J0RlYnVnZ2luZyBkZXRlY3RlZCcsc3RvcCgpKTp2b2lkIDA=\"));",
        "category": "runtime_obfuscation"
    },
    {
        "id": 17,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 52,
        "obfuscation_type": "encoded_urls",
        "description": "Potentially encoded URLs or data",
        "severity": "medium",
        "evidence": "dmFyIGQ9bmV3IERhdGUoKTt2b2lkIDB8fChkLmdldFRpbWUoKS1kPjE1MD8oZG9jdW1lbnQuYm9keS5pbm5lckhUTUw9J0RlYnVn",
        "confidence": 0.8,
        "full_line": "eval(atob(\"dmFyIGQ9bmV3IERhdGUoKTt2b2lkIDB8fChkLmdldFRpbWUoKS1kPjE1MD8oZG9jdW1lbnQuYm9keS5pbm5lckhUTUw9J0RlYnVnZ2luZyBkZXRlY3RlZCcsc3RvcCgpKTp2b2lkIDA=\"));",
        "category": "suspicious_patterns"
    },
    {
        "id": 18,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 52,
        "obfuscation_type": "suspicious_eval_patterns",
        "description": "Found the dangerous combination of eval() and atob() - where base64-encoded data is being decoded and then executed as JavaScript code. This is a classic deobfuscation technique used by malware to hide its true payload. The base64 encoding conceals the malicious code from static analysis, and eval() brings it to life at runtime. This pattern is almost always malicious.",
        "severity": "high",
        "evidence": "eval(atob(",
        "confidence": 0.8,
        "full_line": "eval(atob(\"dmFyIGQ9bmV3IERhdGUoKTt2b2lkIDB8fChkLmdldFRpbWUoKS1kPjE1MD8oZG9jdW1lbnQuYm9keS5pbm5lckhUTUw9J0RlYnVnZ2luZyBkZXRlY3RlZCcsc3RvcCgpKTp2b2lkIDA=\"));",
        "category": "malware_signatures"
    },
    {
        "id": 19,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\anti-debugging.js",
        "line_number": 52,
        "obfuscation_type": "high_entropy_string",
        "description": "Found a string with very high information entropy (5.40 bits per character), which is unusual for human-readable text. Normal English text has entropy around 2.5-3.5, while compressed or encrypted data can reach 5.0+. This suggests the string contains encoded, compressed, or encrypted content that appears random to hide its true meaning. Malware commonly uses such techniques to conceal command strings, URLs, or executable code from casual inspection.",
        "severity": "medium",
        "evidence": "dmFyIGQ9bmV3IERhdGUoKTt2b2lkIDB8fChkLmdldFRpbWUoKS...",
        "confidence": 0.9001868315175147,
        "full_line": "eval(atob(\"dmFyIGQ9bmV3IERhdGUoKTt2b2lkIDB8fChkLmdldFRpbWUoKS1kPjE1MD8oZG9jdW1lbnQuYm9keS5pbm5lckhUTUw9J0RlYnVnZ2luZyBkZXRlY3RlZCcsc3RvcCgpKTp2b2lkIDA=\"));",
        "category": "string_obfuscation"
    },
    {
        "id": 20,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 4,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x1a2b (+2 more)",
        "confidence": 0.9,
        "full_line": "var _0x1a2b = function(_0x3c4d, _0x5e6f) {",
        "category": "malware_signatures"
    },
    {
        "id": 21,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 5,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x3c4d (+1 more)",
        "confidence": 0.9,
        "full_line": "    _0x3c4d = _0x3c4d - 0x0;",
        "category": "malware_signatures"
    },
    {
        "id": 22,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 6,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x1a2b (+1 more)",
        "confidence": 0.9,
        "full_line": "    var _0x7g8h = _0x1a2b[_0x3c4d];",
        "category": "malware_signatures"
    },
    {
        "id": 23,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 27,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "startTime",
        "confidence": 0.8,
        "full_line": "var startTime = new Date();",
        "category": "variable_obfuscation"
    },
    {
        "id": 24,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 27,
        "obfuscation_type": "timing_checks",
        "description": "Timing measurements that could be used for anti-analysis techniques. Code that checks execution time might be trying to detect if it's running in a debugger or analysis environment.",
        "severity": "medium",
        "evidence": "new Date()",
        "confidence": 0.8,
        "full_line": "var startTime = new Date();",
        "category": "anti_analysis"
    },
    {
        "id": 25,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 29,
        "obfuscation_type": "timing_checks",
        "description": "Timing measurements that could be used for anti-analysis techniques. Code that checks execution time might be trying to detect if it's running in a debugger or analysis environment.",
        "severity": "medium",
        "evidence": "new Date()",
        "confidence": 0.8,
        "full_line": "if (new Date() - startTime > 50) {",
        "category": "anti_analysis"
    },
    {
        "id": 26,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 31,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "payload",
        "confidence": 0.8,
        "full_line": "    var payload = atob(\"Y29uc29sZS5sb2coJ01hbHdhcmUgZXhlY3V0ZWQhJyk7\");",
        "category": "variable_obfuscation"
    },
    {
        "id": 27,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 32,
        "obfuscation_type": "eval_usage",
        "description": "Found usage of the eval() function, which executes arbitrary JavaScript code from a string. This is extremely dangerous as it allows dynamic code execution that can be controlled by external inputs. Eval is commonly used in obfuscated malware to hide malicious payloads and bypass static analysis. It's considered a major security risk and should never be used in production code.",
        "severity": "high",
        "evidence": "eval(",
        "confidence": 0.8,
        "full_line": "    eval(payload);",
        "category": "runtime_obfuscation"
    },
    {
        "id": 28,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 36,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "allowed",
        "confidence": 0.8,
        "full_line": "var allowed = ['evil.com', 'malicious.net'];",
        "category": "variable_obfuscation"
    },
    {
        "id": 29,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 43,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "encrypted",
        "confidence": 0.8,
        "full_line": "var encrypted = \"dmFyIG1hbHdhcmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuICJ0aGlzIGlzIGEgbWFsd2FyZSI7IH07IG1hbHdhcmUoKTs=\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 30,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 43,
        "obfuscation_type": "base64_strings",
        "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
        "severity": "medium",
        "evidence": "dmFyIG1hbHdhcmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuICJ0aGlzIGlzIGEgbWFsd2FyZSI7IH07IG1hbHdhcmUoKTs=",
        "confidence": 0.8,
        "full_line": "var encrypted = \"dmFyIG1hbHdhcmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuICJ0aGlzIGlzIGEgbWFsd2FyZSI7IH07IG1hbHdhcmUoKTs=\";",
        "category": "string_obfuscation"
    },
    {
        "id": 31,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 43,
        "obfuscation_type": "encoded_urls",
        "description": "Potentially encoded URLs or data",
        "severity": "medium",
        "evidence": "dmFyIG1hbHdhcmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuICJ0aGlzIGlzIGEgbWFsd2FyZSI7IH07IG1hbHdhcmUoKTs",
        "confidence": 0.8,
        "full_line": "var encrypted = \"dmFyIG1hbHdhcmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuICJ0aGlzIGlzIGEgbWFsd2FyZSI7IH07IG1hbHdhcmUoKTs=\";",
        "category": "suspicious_patterns"
    },
    {
        "id": 32,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 44,
        "obfuscation_type": "eval_usage",
        "description": "Found usage of the eval() function, which executes arbitrary JavaScript code from a string. This is extremely dangerous as it allows dynamic code execution that can be controlled by external inputs. Eval is commonly used in obfuscated malware to hide malicious payloads and bypass static analysis. It's considered a major security risk and should never be used in production code.",
        "severity": "high",
        "evidence": "eval(",
        "confidence": 0.8,
        "full_line": "eval(atob(encrypted));",
        "category": "runtime_obfuscation"
    },
    {
        "id": 33,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 44,
        "obfuscation_type": "suspicious_eval_patterns",
        "description": "Found the dangerous combination of eval() and atob() - where base64-encoded data is being decoded and then executed as JavaScript code. This is a classic deobfuscation technique used by malware to hide its true payload. The base64 encoding conceals the malicious code from static analysis, and eval() brings it to life at runtime. This pattern is almost always malicious.",
        "severity": "high",
        "evidence": "eval(atob(",
        "confidence": 0.8,
        "full_line": "eval(atob(encrypted));",
        "category": "malware_signatures"
    },
    {
        "id": 34,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 47,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "selfMod",
        "confidence": 0.8,
        "full_line": "var selfMod = function() {",
        "category": "variable_obfuscation"
    },
    {
        "id": 35,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 50,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "selfMod",
        "confidence": 0.8,
        "full_line": "    selfMod = function() {",
        "category": "variable_obfuscation"
    },
    {
        "id": 36,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 69,
        "obfuscation_type": "char_code_strings",
        "description": "Identified String.fromCharCode() being called with a very long list of numeric arguments. This function converts ASCII character codes back to readable text. Malware often uses this to hide strings by representing them as arrays of numbers, making the malicious content invisible to casual inspection. The long argument list suggests substantial hidden content that could be command strings, URLs, or executable code.",
        "severity": "high",
        "evidence": "String.fromCharCode(77, 97, 108, 119, 97, 114, 101)",
        "confidence": 0.8,
        "full_line": "var str1 = String.fromCharCode(77, 97, 108, 119, 97, 114, 101); // \"Malware\"",
        "category": "malware_signatures"
    },
    {
        "id": 37,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 71,
        "obfuscation_type": "obfuscated_vars",
        "description": "Identified variable names combining short letters with numbers (like 'a1', 'x2', 'b10'). This naming pattern is characteristic of code that has been automatically minified or obfuscated, making it difficult for humans to understand variable purposes and relationships.",
        "severity": "low",
        "evidence": "x61 (+4 more)",
        "confidence": 0.9,
        "full_line": "var str3 = \"\\x4d\\x61\\x6c\\x77\\x61\\x72\\x65\"; // Hex encoded",
        "category": "variable_obfuscation"
    },
    {
        "id": 38,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 71,
        "obfuscation_type": "hex_strings",
        "description": "Found hexadecimal escape sequences (\\\\xXX format) in strings. These are used to represent characters by their ASCII/hexadecimal values. While occasionally legitimate for encoding special characters, patterns of hex escapes often indicate attempts to obscure readable text or hide malicious payloads by making them appear as binary data rather than human-readable strings.",
        "severity": "medium",
        "evidence": "\\x4d (+6 more)",
        "confidence": 0.9,
        "full_line": "var str3 = \"\\x4d\\x61\\x6c\\x77\\x61\\x72\\x65\"; // Hex encoded",
        "category": "string_obfuscation"
    },
    {
        "id": 39,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 31,
        "obfuscation_type": "high_entropy_string",
        "description": "Found a string with very high information entropy (4.68 bits per character), which is unusual for human-readable text. Normal English text has entropy around 2.5-3.5, while compressed or encrypted data can reach 5.0+. This suggests the string contains encoded, compressed, or encrypted content that appears random to hide its true meaning. Malware commonly uses such techniques to conceal command strings, URLs, or executable code from casual inspection.",
        "severity": "medium",
        "evidence": "Y29uc29sZS5sb2coJ01hbHdhcmUgZXhlY3V0ZWQhJyk7",
        "confidence": 0.7801148814907221,
        "full_line": "    var payload = atob(\"Y29uc29sZS5sb2coJ01hbHdhcmUgZXhlY3V0ZWQhJyk7\");",
        "category": "string_obfuscation"
    },
    {
        "id": 40,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\comprehensive-malware.js",
        "line_number": 43,
        "obfuscation_type": "high_entropy_string",
        "description": "Found a string with very high information entropy (4.97 bits per character), which is unusual for human-readable text. Normal English text has entropy around 2.5-3.5, while compressed or encrypted data can reach 5.0+. This suggests the string contains encoded, compressed, or encrypted content that appears random to hide its true meaning. Malware commonly uses such techniques to conceal command strings, URLs, or executable code from casual inspection.",
        "severity": "medium",
        "evidence": "dmFyIG1hbHdhcmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuICJ0aG...",
        "confidence": 0.829026019045763,
        "full_line": "var encrypted = \"dmFyIG1hbHdhcmUgPSBmdW5jdGlvbigpIHsgcmV0dXJuICJ0aGlzIGlzIGEgbWFsd2FyZSI7IH07IG1hbHdhcmUoKTs=\";",
        "category": "string_obfuscation"
    },
    {
        "id": 41,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\minified.js",
        "line_number": 1,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "a (+6 more)",
        "confidence": 0.9,
        "full_line": "var a=1,b=2,c=3,d=a+b+c,e=function(f){return f*d},g=e(2),h=function(){return g+1};console.log(h());var i=\"data:text/plain;base64,SGVsbG8=\",j=i.length,k=function(l){return l*j};console.log(k(5));",
        "category": "variable_obfuscation"
    },
    {
        "id": 42,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\minified.js",
        "line_number": 1,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "a (+6 more)",
        "confidence": 0.9,
        "full_line": "var a=1,b=2,c=3,d=a+b+c,e=function(f){return f*d},g=e(2),h=function(){return g+1};console.log(h());var i=\"data:text/plain;base64,SGVsbG8=\",j=i.length,k=function(l){return l*j};console.log(k(5));",
        "category": "variable_obfuscation"
    },
    {
        "id": 43,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\minified.js",
        "line_number": 1,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "plain",
        "confidence": 0.8,
        "full_line": "var a=1,b=2,c=3,d=a+b+c,e=function(f){return f*d},g=e(2),h=function(){return g+1};console.log(h());var i=\"data:text/plain;base64,SGVsbG8=\",j=i.length,k=function(l){return l*j};console.log(k(5));",
        "category": "variable_obfuscation"
    },
    {
        "id": 44,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\minified.js",
        "line_number": 1,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "b",
        "confidence": 0.7,
        "full_line": "var a=1,b=2,c=3,d=a+b+c,e=function(f){return f*d},g=e(2),h=function(){return g+1};console.log(h());var i=\"data:text/plain;base64,SGVsbG8=\",j=i.length,k=function(l){return l*j};console.log(k(5));",
        "category": "variable_obfuscation"
    },
    {
        "id": 45,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\minified.js",
        "line_number": 1,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "d",
        "confidence": 0.7,
        "full_line": "var a=1,b=2,c=3,d=a+b+c,e=function(f){return f*d},g=e(2),h=function(){return g+1};console.log(h());var i=\"data:text/plain;base64,SGVsbG8=\",j=i.length,k=function(l){return l*j};console.log(k(5));",
        "category": "variable_obfuscation"
    },
    {
        "id": 46,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\minified.js",
        "line_number": 1,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "g",
        "confidence": 0.7,
        "full_line": "var a=1,b=2,c=3,d=a+b+c,e=function(f){return f*d},g=e(2),h=function(){return g+1};console.log(h());var i=\"data:text/plain;base64,SGVsbG8=\",j=i.length,k=function(l){return l*j};console.log(k(5));",
        "category": "variable_obfuscation"
    },
    {
        "id": 47,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\minified.js",
        "line_number": 1,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "e",
        "confidence": 0.7,
        "full_line": "var a=1,b=2,c=3,d=a+b+c,e=function(f){return f*d},g=e(2),h=function(){return g+1};console.log(h());var i=\"data:text/plain;base64,SGVsbG8=\",j=i.length,k=function(l){return l*j};console.log(k(5));",
        "category": "variable_obfuscation"
    },
    {
        "id": 48,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\minified.js",
        "line_number": 1,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "c",
        "confidence": 0.7,
        "full_line": "var a=1,b=2,c=3,d=a+b+c,e=function(f){return f*d},g=e(2),h=function(){return g+1};console.log(h());var i=\"data:text/plain;base64,SGVsbG8=\",j=i.length,k=function(l){return l*j};console.log(k(5));",
        "category": "variable_obfuscation"
    },
    {
        "id": 49,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\minified.js",
        "line_number": 1,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "h",
        "confidence": 0.7,
        "full_line": "var a=1,b=2,c=3,d=a+b+c,e=function(f){return f*d},g=e(2),h=function(){return g+1};console.log(h());var i=\"data:text/plain;base64,SGVsbG8=\",j=i.length,k=function(l){return l*j};console.log(k(5));",
        "category": "variable_obfuscation"
    },
    {
        "id": 50,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\minified.js",
        "line_number": 1,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "a",
        "confidence": 0.7,
        "full_line": "var a=1,b=2,c=3,d=a+b+c,e=function(f){return f*d},g=e(2),h=function(){return g+1};console.log(h());var i=\"data:text/plain;base64,SGVsbG8=\",j=i.length,k=function(l){return l*j};console.log(k(5));",
        "category": "variable_obfuscation"
    },
    {
        "id": 51,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 5,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    var result = 0;",
        "category": "variable_obfuscation"
    },
    {
        "id": 52,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 6,
        "obfuscation_type": "always_false",
        "description": "Found an 'if (false)' condition that will never execute. This creates dead code - sections of the program that can never be reached during normal execution. While sometimes used for debugging or feature toggles, this pattern is commonly employed in obfuscated code to confuse analysis tools and make the code appear more complex than it actually is.",
        "severity": "medium",
        "evidence": "if (false)",
        "confidence": 0.8,
        "full_line": "    if (false) { // never executed",
        "category": "control_flow_obfuscation"
    },
    {
        "id": 53,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 7,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "        result = 999;",
        "category": "variable_obfuscation"
    },
    {
        "id": 54,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 10,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    result = 42;",
        "category": "variable_obfuscation"
    },
    {
        "id": 55,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 11,
        "obfuscation_type": "always_true",
        "description": "Detected an 'if (true)' condition that is always true. This creates unnecessary conditional logic that doesn't actually branch. While occasionally used for code organization, this pattern often indicates attempts to make the code appear more complex or to prepare for future obfuscation transformations that would make the condition more complex.",
        "severity": "low",
        "evidence": "if (true)",
        "confidence": 0.8,
        "full_line": "    if (true) {",
        "category": "control_flow_obfuscation"
    },
    {
        "id": 56,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 12,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "        result = result + 1;",
        "category": "variable_obfuscation"
    },
    {
        "id": 57,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 16,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "unused",
        "confidence": 0.8,
        "full_line": "        var unused = \"dead\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 58,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 19,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    return result;",
        "category": "variable_obfuscation"
    },
    {
        "id": 59,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 24,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "condition",
        "confidence": 0.8,
        "full_line": "    var condition = (x * 0) === 0; // always true",
        "category": "variable_obfuscation"
    },
    {
        "id": 60,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 35,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    var result = 0;",
        "category": "variable_obfuscation"
    },
    {
        "id": 61,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 45,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "break",
        "confidence": 0.8,
        "full_line": "                break;",
        "category": "variable_obfuscation"
    },
    {
        "id": 62,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 47,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "                result = input * 2;",
        "category": "variable_obfuscation"
    },
    {
        "id": 63,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 49,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "break",
        "confidence": 0.8,
        "full_line": "                break;",
        "category": "variable_obfuscation"
    },
    {
        "id": 64,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 51,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "                result = input * 3;",
        "category": "variable_obfuscation"
    },
    {
        "id": 65,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 53,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "break",
        "confidence": 0.8,
        "full_line": "                break;",
        "category": "variable_obfuscation"
    },
    {
        "id": 66,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 55,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "                return result;",
        "category": "variable_obfuscation"
    },
    {
        "id": 67,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 65,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "e",
        "confidence": 0.8,
        "full_line": "        if (e === \"goto\") {",
        "category": "variable_obfuscation"
    },
    {
        "id": 68,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 65,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "e",
        "confidence": 0.8,
        "full_line": "        if (e === \"goto\") {",
        "category": "variable_obfuscation"
    },
    {
        "id": 69,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 73,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    var result = 0;",
        "category": "variable_obfuscation"
    },
    {
        "id": 70,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 75,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "continue",
        "confidence": 0.8,
        "full_line": "        if (i < 10) continue;",
        "category": "variable_obfuscation"
    },
    {
        "id": 71,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 76,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "break",
        "confidence": 0.8,
        "full_line": "        if (i > 20) break;",
        "category": "variable_obfuscation"
    },
    {
        "id": 72,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 81,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "temp",
        "confidence": 0.8,
        "full_line": "            var temp = i * 2;",
        "category": "variable_obfuscation"
    },
    {
        "id": 73,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 84,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    return result;",
        "category": "variable_obfuscation"
    },
    {
        "id": 74,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 92,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "z",
        "confidence": 0.8,
        "full_line": "                return x + y + z;",
        "category": "variable_obfuscation"
    },
    {
        "id": 75,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 92,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "z",
        "confidence": 0.8,
        "full_line": "                return x + y + z;",
        "category": "variable_obfuscation"
    },
    {
        "id": 76,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 93,
        "obfuscation_type": "always_false",
        "description": "Found an 'if (false)' condition that will never execute. This creates dead code - sections of the program that can never be reached during normal execution. While sometimes used for debugging or feature toggles, this pattern is commonly employed in obfuscated code to confuse analysis tools and make the code appear more complex than it actually is.",
        "severity": "medium",
        "evidence": "if (false)",
        "confidence": 0.8,
        "full_line": "            } else if (false) {",
        "category": "control_flow_obfuscation"
    },
    {
        "id": 77,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 94,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "y",
        "confidence": 0.8,
        "full_line": "                return x + y; // dead",
        "category": "variable_obfuscation"
    },
    {
        "id": 78,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 94,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "y",
        "confidence": 0.8,
        "full_line": "                return x + y; // dead",
        "category": "variable_obfuscation"
    },
    {
        "id": 79,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 99,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "PI",
        "confidence": 0.8,
        "full_line": "    } else if (Math.PI === 3.14) { // always false",
        "category": "variable_obfuscation"
    },
    {
        "id": 80,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 102,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "z",
        "confidence": 0.8,
        "full_line": "    return x * y * z;",
        "category": "variable_obfuscation"
    },
    {
        "id": 81,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 102,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "z",
        "confidence": 0.8,
        "full_line": "    return x * y * z;",
        "category": "variable_obfuscation"
    },
    {
        "id": 82,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 119,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result (+1 more)",
        "confidence": 0.9,
        "full_line": "    var result = input;",
        "category": "variable_obfuscation"
    },
    {
        "id": 83,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 125,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "break",
        "confidence": 0.8,
        "full_line": "                break;",
        "category": "variable_obfuscation"
    },
    {
        "id": 84,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 127,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "                result = result * 2;",
        "category": "variable_obfuscation"
    },
    {
        "id": 85,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 129,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "break",
        "confidence": 0.8,
        "full_line": "                break;",
        "category": "variable_obfuscation"
    },
    {
        "id": 86,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 136,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "break",
        "confidence": 0.8,
        "full_line": "                break;",
        "category": "variable_obfuscation"
    },
    {
        "id": 87,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 138,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "                result = result - 50;",
        "category": "variable_obfuscation"
    },
    {
        "id": 88,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 140,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "break",
        "confidence": 0.8,
        "full_line": "                break;",
        "category": "variable_obfuscation"
    },
    {
        "id": 89,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 143,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "break",
        "confidence": 0.8,
        "full_line": "                break;",
        "category": "variable_obfuscation"
    },
    {
        "id": 90,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 148,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    return result;",
        "category": "variable_obfuscation"
    },
    {
        "id": 91,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 88,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "z",
        "confidence": 0.7,
        "full_line": "function nestedDeadCode(x, y, z) {",
        "category": "variable_obfuscation"
    },
    {
        "id": 92,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 88,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "y",
        "confidence": 0.7,
        "full_line": "function nestedDeadCode(x, y, z) {",
        "category": "variable_obfuscation"
    },
    {
        "id": 93,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 65,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "e",
        "confidence": 0.7,
        "full_line": "        if (e === \"goto\") {",
        "category": "variable_obfuscation"
    },
    {
        "id": 94,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.js",
        "line_number": 99,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "PI",
        "confidence": 0.6,
        "full_line": "    } else if (Math.PI === 3.14) { // always false",
        "category": "variable_obfuscation"
    },
    {
        "id": 95,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 5,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    result = 0",
        "category": "variable_obfuscation"
    },
    {
        "id": 96,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 7,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "        result = 999",
        "category": "variable_obfuscation"
    },
    {
        "id": 97,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 9,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    result = 42",
        "category": "variable_obfuscation"
    },
    {
        "id": 98,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 11,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "        result = result + 1",
        "category": "variable_obfuscation"
    },
    {
        "id": 99,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 14,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "unused",
        "confidence": 0.8,
        "full_line": "        unused = \"dead\"",
        "category": "variable_obfuscation"
    },
    {
        "id": 100,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 20,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "condition",
        "confidence": 0.8,
        "full_line": "    condition = (x * 0) == 0  # always true",
        "category": "variable_obfuscation"
    },
    {
        "id": 101,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 21,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "condition",
        "confidence": 0.8,
        "full_line": "    if condition:",
        "category": "variable_obfuscation"
    },
    {
        "id": 102,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 29,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    result = 0",
        "category": "variable_obfuscation"
    },
    {
        "id": 103,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 38,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "            result = input_val * 2",
        "category": "variable_obfuscation"
    },
    {
        "id": 104,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 41,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "            result = input_val * 3",
        "category": "variable_obfuscation"
    },
    {
        "id": 105,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 50,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "e",
        "confidence": 0.8,
        "full_line": "    except ValueError as e:",
        "category": "variable_obfuscation"
    },
    {
        "id": 106,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 50,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "e",
        "confidence": 0.8,
        "full_line": "    except ValueError as e:",
        "category": "variable_obfuscation"
    },
    {
        "id": 107,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 70,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    result = 0",
        "category": "variable_obfuscation"
    },
    {
        "id": 108,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 80,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "temp",
        "confidence": 0.8,
        "full_line": "            temp = i * 2",
        "category": "variable_obfuscation"
    },
    {
        "id": 109,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 86,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    result = input_val",
        "category": "variable_obfuscation"
    },
    {
        "id": 110,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 92,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "            result = result * 2",
        "category": "variable_obfuscation"
    },
    {
        "id": 111,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 100,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "            result = result - 50",
        "category": "variable_obfuscation"
    },
    {
        "id": 112,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 110,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "n",
        "confidence": 0.7,
        "full_line": "def recursive_obfuscation(n, path=\"main\"):",
        "category": "variable_obfuscation"
    },
    {
        "id": 113,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 55,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "y",
        "confidence": 0.7,
        "full_line": "def nested_dead_code(x, y, z):",
        "category": "variable_obfuscation"
    },
    {
        "id": 114,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 50,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "e",
        "confidence": 0.7,
        "full_line": "    except ValueError as e:",
        "category": "variable_obfuscation"
    },
    {
        "id": 115,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\control-flow-obfuscation.py",
        "line_number": 55,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "z",
        "confidence": 0.7,
        "full_line": "def nested_dead_code(x, y, z):",
        "category": "variable_obfuscation"
    },
    {
        "id": 116,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\normal.py",
        "line_number": 11,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "Args",
        "confidence": 0.8,
        "full_line": "    Args:",
        "category": "variable_obfuscation"
    },
    {
        "id": 117,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\normal.py",
        "line_number": 14,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "Returns",
        "confidence": 0.8,
        "full_line": "    Returns:",
        "category": "variable_obfuscation"
    },
    {
        "id": 118,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\normal.py",
        "line_number": 15,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "float",
        "confidence": 0.8,
        "full_line": "        float: Sum of all numbers",
        "category": "variable_obfuscation"
    },
    {
        "id": 119,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\normal.py",
        "line_number": 18,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "numbers",
        "confidence": 0.8,
        "full_line": "    for number in numbers:",
        "category": "variable_obfuscation"
    },
    {
        "id": 120,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\normal.py",
        "line_number": 25,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    result = calculate_sum(test_numbers)",
        "category": "variable_obfuscation"
    },
    {
        "id": 121,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.js",
        "line_number": 2,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "a (+5 more)",
        "confidence": 0.9,
        "full_line": "var a=b=>b*a;a=10;var c=function(d){return d+e};e=5;console.log(c(a));",
        "category": "variable_obfuscation"
    },
    {
        "id": 122,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.js",
        "line_number": 2,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "a (+5 more)",
        "confidence": 0.9,
        "full_line": "var a=b=>b*a;a=10;var c=function(d){return d+e};e=5;console.log(c(a));",
        "category": "variable_obfuscation"
    },
    {
        "id": 123,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.js",
        "line_number": 2,
        "obfuscation_type": "minified_code",
        "description": "Multiple assignments on one line (minification pattern)",
        "severity": "medium",
        "evidence": "a=b=>b*a;a=10; (+1 more)",
        "confidence": 0.9,
        "full_line": "var a=b=>b*a;a=10;var c=function(d){return d+e};e=5;console.log(c(a));",
        "category": "structure_obfuscation"
    },
    {
        "id": 124,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.js",
        "line_number": 5,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "hexString",
        "confidence": 0.8,
        "full_line": "var hexString = \"\\x48\\x65\\x6c\\x6c\\x6f\"; // Hex encoded \"Hello\"",
        "category": "variable_obfuscation"
    },
    {
        "id": 125,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.js",
        "line_number": 5,
        "obfuscation_type": "obfuscated_vars",
        "description": "Identified variable names combining short letters with numbers (like 'a1', 'x2', 'b10'). This naming pattern is characteristic of code that has been automatically minified or obfuscated, making it difficult for humans to understand variable purposes and relationships.",
        "severity": "low",
        "evidence": "x48 (+1 more)",
        "confidence": 0.9,
        "full_line": "var hexString = \"\\x48\\x65\\x6c\\x6c\\x6f\"; // Hex encoded \"Hello\"",
        "category": "variable_obfuscation"
    },
    {
        "id": 126,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.js",
        "line_number": 5,
        "obfuscation_type": "hex_strings",
        "description": "Found hexadecimal escape sequences (\\\\xXX format) in strings. These are used to represent characters by their ASCII/hexadecimal values. While occasionally legitimate for encoding special characters, patterns of hex escapes often indicate attempts to obscure readable text or hide malicious payloads by making them appear as binary data rather than human-readable strings.",
        "severity": "medium",
        "evidence": "\\x48 (+4 more)",
        "confidence": 0.9,
        "full_line": "var hexString = \"\\x48\\x65\\x6c\\x6c\\x6f\"; // Hex encoded \"Hello\"",
        "category": "string_obfuscation"
    },
    {
        "id": 127,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.js",
        "line_number": 7,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "y (+2 more)",
        "confidence": 0.9,
        "full_line": "function minifiedFunction(){var x=1,y=2,z=3;return x+y+z;}minifiedFunction();another=function(){return 42;};",
        "category": "variable_obfuscation"
    },
    {
        "id": 128,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.js",
        "line_number": 7,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "y (+2 more)",
        "confidence": 0.9,
        "full_line": "function minifiedFunction(){var x=1,y=2,z=3;return x+y+z;}minifiedFunction();another=function(){return 42;};",
        "category": "variable_obfuscation"
    },
    {
        "id": 129,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.js",
        "line_number": 7,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "another",
        "confidence": 0.8,
        "full_line": "function minifiedFunction(){var x=1,y=2,z=3;return x+y+z;}minifiedFunction();another=function(){return 42;};",
        "category": "variable_obfuscation"
    },
    {
        "id": 130,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.js",
        "line_number": 2,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "c",
        "confidence": 0.7,
        "full_line": "var a=b=>b*a;a=10;var c=function(d){return d+e};e=5;console.log(c(a));",
        "category": "variable_obfuscation"
    },
    {
        "id": 131,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.js",
        "line_number": 7,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "z",
        "confidence": 0.7,
        "full_line": "function minifiedFunction(){var x=1,y=2,z=3;return x+y+z;}minifiedFunction();another=function(){return 42;};",
        "category": "variable_obfuscation"
    },
    {
        "id": 132,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.js",
        "line_number": 2,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "e",
        "confidence": 0.7,
        "full_line": "var a=b=>b*a;a=10;var c=function(d){return d+e};e=5;console.log(c(a));",
        "category": "variable_obfuscation"
    },
    {
        "id": 133,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.js",
        "line_number": 2,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "a",
        "confidence": 0.7,
        "full_line": "var a=b=>b*a;a=10;var c=function(d){return d+e};e=5;console.log(c(a));",
        "category": "variable_obfuscation"
    },
    {
        "id": 134,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.js",
        "line_number": 7,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "y",
        "confidence": 0.7,
        "full_line": "function minifiedFunction(){var x=1,y=2,z=3;return x+y+z;}minifiedFunction();another=function(){return 42;};",
        "category": "variable_obfuscation"
    },
    {
        "id": 135,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.js",
        "line_number": 2,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "b",
        "confidence": 0.7,
        "full_line": "var a=b=>b*a;a=10;var c=function(d){return d+e};e=5;console.log(c(a));",
        "category": "variable_obfuscation"
    },
    {
        "id": 136,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 2,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x5a2c (+2 more)",
        "confidence": 0.9,
        "full_line": "var _0x5a2c = function(_0x3b2c, _0x1a4e) {",
        "category": "malware_signatures"
    },
    {
        "id": 137,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 3,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x3b2c (+1 more)",
        "confidence": 0.9,
        "full_line": "    _0x3b2c = _0x3b2c - 0x0;",
        "category": "malware_signatures"
    },
    {
        "id": 138,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 4,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x4b5d (+2 more)",
        "confidence": 0.9,
        "full_line": "    var _0x4b5d = _0x5a2c[_0x3b2c];",
        "category": "malware_signatures"
    },
    {
        "id": 139,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 5,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x4b5d",
        "confidence": 0.8,
        "full_line": "    return _0x4b5d;",
        "category": "malware_signatures"
    },
    {
        "id": 140,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 8,
        "obfuscation_type": "hex_strings",
        "description": "Found hexadecimal escape sequences (\\\\xXX format) in strings. These are used to represent characters by their ASCII/hexadecimal values. While occasionally legitimate for encoding special characters, patterns of hex escapes often indicate attempts to obscure readable text or hide malicious payloads by making them appear as binary data rather than human-readable strings.",
        "severity": "medium",
        "evidence": "\\x20",
        "confidence": 0.8,
        "full_line": "var _0x2f1a = ['Hello\\x20World', 'log', 'console'];",
        "category": "string_obfuscation"
    },
    {
        "id": 141,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 8,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x2f1a",
        "confidence": 0.8,
        "full_line": "var _0x2f1a = ['Hello\\x20World', 'log', 'console'];",
        "category": "malware_signatures"
    },
    {
        "id": 142,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 9,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x4e5f (+1 more)",
        "confidence": 0.9,
        "full_line": "(function(_0x4e5f, _0x2b3c) {",
        "category": "malware_signatures"
    },
    {
        "id": 143,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 10,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x1c8d (+1 more)",
        "confidence": 0.9,
        "full_line": "    var _0x1c8d = function(_0x5f2e) {",
        "category": "malware_signatures"
    },
    {
        "id": 144,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 11,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x5f2e",
        "confidence": 0.8,
        "full_line": "        while (--_0x5f2e) {",
        "category": "malware_signatures"
    },
    {
        "id": 145,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 12,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x4e5f (+1 more)",
        "confidence": 0.9,
        "full_line": "            _0x4e5f['push'](_0x4e5f['shift']());",
        "category": "malware_signatures"
    },
    {
        "id": 146,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 15,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x1c8d (+1 more)",
        "confidence": 0.9,
        "full_line": "    _0x1c8d(++_0x2b3c);",
        "category": "malware_signatures"
    },
    {
        "id": 147,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 16,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x2f1a",
        "confidence": 0.8,
        "full_line": "}(_0x2f1a, 0x1b3));",
        "category": "malware_signatures"
    },
    {
        "id": 148,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 18,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x4d2f (+2 more)",
        "confidence": 0.9,
        "full_line": "var _0x4d2f = function(_0x1f4a, _0x3c5b) {",
        "category": "malware_signatures"
    },
    {
        "id": 149,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 19,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x1f4a (+1 more)",
        "confidence": 0.9,
        "full_line": "    _0x1f4a = _0x1f4a - 0x0;",
        "category": "malware_signatures"
    },
    {
        "id": 150,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 20,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x2e8f (+2 more)",
        "confidence": 0.9,
        "full_line": "    var _0x2e8f = _0x2f1a[_0x1f4a];",
        "category": "malware_signatures"
    },
    {
        "id": 151,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 21,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x2e8f",
        "confidence": 0.8,
        "full_line": "    return _0x2e8f;",
        "category": "malware_signatures"
    },
    {
        "id": 152,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 24,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x4d2f (+1 more)",
        "confidence": 0.9,
        "full_line": "console[_0x4d2f('0x1')](_0x4d2f('0x0'));",
        "category": "malware_signatures"
    },
    {
        "id": 153,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscator-io-example.js",
        "line_number": 24,
        "obfuscation_type": "computed_property_access",
        "description": "Complex computed property access with long expressions inside brackets following an identifier. This makes it difficult to statically determine which properties are being accessed, hiding the data flow and potentially concealing malicious operations.",
        "severity": "medium",
        "evidence": "console[_0x4d2f('0x1')]",
        "confidence": 0.8,
        "full_line": "console[_0x4d2f('0x1')](_0x4d2f('0x0'));",
        "category": "structure_obfuscation"
    },
    {
        "id": 154,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 2,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "a (+4 more)",
        "confidence": 0.9,
        "full_line": "a=b=c=1;d=a+b+c;print(d)",
        "category": "variable_obfuscation"
    },
    {
        "id": 155,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 2,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "a (+4 more)",
        "confidence": 0.9,
        "full_line": "a=b=c=1;d=a+b+c;print(d)",
        "category": "variable_obfuscation"
    },
    {
        "id": 156,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 2,
        "obfuscation_type": "minified_code",
        "description": "Multiple assignments on one line (minification pattern)",
        "severity": "medium",
        "evidence": "a=b=c=1;d=a+b+c;",
        "confidence": 0.8,
        "full_line": "a=b=c=1;d=a+b+c;print(d)",
        "category": "structure_obfuscation"
    },
    {
        "id": 157,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 5,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "result=f(1,2,3);print(result)",
        "category": "variable_obfuscation"
    },
    {
        "id": 158,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 8,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "encoded",
        "confidence": 0.8,
        "full_line": "import base64;encoded=\"SGVsbG8gV29ybGQ=\";print(base64.b64decode(encoded))",
        "category": "variable_obfuscation"
    },
    {
        "id": 159,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 11,
        "obfuscation_type": "obfuscated_vars",
        "description": "Identified variable names combining short letters with numbers (like 'a1', 'x2', 'b10'). This naming pattern is characteristic of code that has been automatically minified or obfuscated, making it difficult for humans to understand variable purposes and relationships.",
        "severity": "low",
        "evidence": "x48 (+1 more)",
        "confidence": 0.9,
        "full_line": "hex_data=b'\\x48\\x65\\x6c\\x6c\\x6f';print(hex_data.decode())",
        "category": "variable_obfuscation"
    },
    {
        "id": 160,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 11,
        "obfuscation_type": "hex_strings",
        "description": "Found hexadecimal escape sequences (\\\\xXX format) in strings. These are used to represent characters by their ASCII/hexadecimal values. While occasionally legitimate for encoding special characters, patterns of hex escapes often indicate attempts to obscure readable text or hide malicious payloads by making them appear as binary data rather than human-readable strings.",
        "severity": "medium",
        "evidence": "\\x48 (+4 more)",
        "confidence": 0.9,
        "full_line": "hex_data=b'\\x48\\x65\\x6c\\x6c\\x6f';print(hex_data.decode())",
        "category": "string_obfuscation"
    },
    {
        "id": 161,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 14,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "C (+4 more)",
        "confidence": 0.9,
        "full_line": "class C:def __init__(self,v):self.v=v;def get(self):return self.v;c=C(42);print(c.get())",
        "category": "variable_obfuscation"
    },
    {
        "id": 162,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 14,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "C (+4 more)",
        "confidence": 0.9,
        "full_line": "class C:def __init__(self,v):self.v=v;def get(self):return self.v;c=C(42);print(c.get())",
        "category": "variable_obfuscation"
    },
    {
        "id": 163,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 4,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "z",
        "confidence": 0.7,
        "full_line": "def f(x,y,z):return x+y+z",
        "category": "variable_obfuscation"
    },
    {
        "id": 164,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 2,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "d",
        "confidence": 0.7,
        "full_line": "a=b=c=1;d=a+b+c;print(d)",
        "category": "variable_obfuscation"
    },
    {
        "id": 165,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 2,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "c",
        "confidence": 0.7,
        "full_line": "a=b=c=1;d=a+b+c;print(d)",
        "category": "variable_obfuscation"
    },
    {
        "id": 166,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 14,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "v",
        "confidence": 0.7,
        "full_line": "class C:def __init__(self,v):self.v=v;def get(self):return self.v;c=C(42);print(c.get())",
        "category": "variable_obfuscation"
    },
    {
        "id": 167,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 14,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "C",
        "confidence": 0.7,
        "full_line": "class C:def __init__(self,v):self.v=v;def get(self):return self.v;c=C(42);print(c.get())",
        "category": "variable_obfuscation"
    },
    {
        "id": 168,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 2,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "b",
        "confidence": 0.7,
        "full_line": "a=b=c=1;d=a+b+c;print(d)",
        "category": "variable_obfuscation"
    },
    {
        "id": 169,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 2,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "a",
        "confidence": 0.7,
        "full_line": "a=b=c=1;d=a+b+c;print(d)",
        "category": "variable_obfuscation"
    },
    {
        "id": 170,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\obfuscated.py",
        "line_number": 4,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "y",
        "confidence": 0.7,
        "full_line": "def f(x,y,z):return x+y+z",
        "category": "variable_obfuscation"
    },
    {
        "id": 171,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 2,
        "obfuscation_type": "base64_strings",
        "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
        "severity": "medium",
        "evidence": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
        "confidence": 0.8,
        "full_line": "var _0x4e5f = ['fromCharCode', 'apply', 'prototype', 'call', 'constructor', 'length', 'charCodeAt', 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=', ''];",
        "category": "string_obfuscation"
    },
    {
        "id": 172,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 2,
        "obfuscation_type": "encoded_urls",
        "description": "Potentially encoded URLs or data",
        "severity": "medium",
        "evidence": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
        "confidence": 0.8,
        "full_line": "var _0x4e5f = ['fromCharCode', 'apply', 'prototype', 'call', 'constructor', 'length', 'charCodeAt', 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=', ''];",
        "category": "suspicious_patterns"
    },
    {
        "id": 173,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 2,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x4e5f",
        "confidence": 0.8,
        "full_line": "var _0x4e5f = ['fromCharCode', 'apply', 'prototype', 'call', 'constructor', 'length', 'charCodeAt', 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=', ''];",
        "category": "malware_signatures"
    },
    {
        "id": 174,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 3,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x2b3c (+1 more)",
        "confidence": 0.9,
        "full_line": "(function(_0x2b3c, _0x1c8d) {",
        "category": "malware_signatures"
    },
    {
        "id": 175,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 4,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x5f2e (+1 more)",
        "confidence": 0.9,
        "full_line": "    var _0x5f2e = function(_0x4d2f) {",
        "category": "malware_signatures"
    },
    {
        "id": 176,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 5,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x4d2f",
        "confidence": 0.8,
        "full_line": "        while (--_0x4d2f) {",
        "category": "malware_signatures"
    },
    {
        "id": 177,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 6,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x2b3c (+1 more)",
        "confidence": 0.9,
        "full_line": "            _0x2b3c['push'](_0x2b3c['shift']());",
        "category": "malware_signatures"
    },
    {
        "id": 178,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 9,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x5f2e (+1 more)",
        "confidence": 0.9,
        "full_line": "    _0x5f2e(++_0x1c8d);",
        "category": "malware_signatures"
    },
    {
        "id": 179,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 10,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x4e5f",
        "confidence": 0.8,
        "full_line": "}(_0x4e5f, 0x1b3));",
        "category": "malware_signatures"
    },
    {
        "id": 180,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 12,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x1f4a (+2 more)",
        "confidence": 0.9,
        "full_line": "var _0x1f4a = function(_0x3c5b, _0x2e8f) {",
        "category": "malware_signatures"
    },
    {
        "id": 181,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 13,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x3c5b (+1 more)",
        "confidence": 0.9,
        "full_line": "    _0x3c5b = _0x3c5b - 0x0;",
        "category": "malware_signatures"
    },
    {
        "id": 182,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 14,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x5a2c (+2 more)",
        "confidence": 0.9,
        "full_line": "    var _0x5a2c = _0x4e5f[_0x3c5b];",
        "category": "malware_signatures"
    },
    {
        "id": 183,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 15,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x5a2c",
        "confidence": 0.8,
        "full_line": "    return _0x5a2c;",
        "category": "malware_signatures"
    },
    {
        "id": 184,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 18,
        "obfuscation_type": "base64_strings",
        "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
        "severity": "medium",
        "evidence": "dmFyIGhlbGxvID0gIkhlbGxvIFdvcmxkIjsgY29uc29sZS5sb2cocGVsbG8pOw==",
        "confidence": 0.8,
        "full_line": "var encryptedCode = \"dmFyIGhlbGxvID0gIkhlbGxvIFdvcmxkIjsgY29uc29sZS5sb2cocGVsbG8pOw==\";",
        "category": "string_obfuscation"
    },
    {
        "id": 185,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 18,
        "obfuscation_type": "encoded_urls",
        "description": "Potentially encoded URLs or data",
        "severity": "medium",
        "evidence": "dmFyIGhlbGxvID0gIkhlbGxvIFdvcmxkIjsgY29uc29sZS5sb2cocGVsbG8pOw",
        "confidence": 0.8,
        "full_line": "var encryptedCode = \"dmFyIGhlbGxvID0gIkhlbGxvIFdvcmxkIjsgY29uc29sZS5sb2cocGVsbG8pOw==\";",
        "category": "suspicious_patterns"
    },
    {
        "id": 186,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 19,
        "obfuscation_type": "eval_usage",
        "description": "Found usage of the eval() function, which executes arbitrary JavaScript code from a string. This is extremely dangerous as it allows dynamic code execution that can be controlled by external inputs. Eval is commonly used in obfuscated malware to hide malicious payloads and bypass static analysis. It's considered a major security risk and should never be used in production code.",
        "severity": "high",
        "evidence": "eval(",
        "confidence": 0.8,
        "full_line": "eval(atob(encryptedCode));",
        "category": "runtime_obfuscation"
    },
    {
        "id": 187,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 19,
        "obfuscation_type": "suspicious_eval_patterns",
        "description": "Found the dangerous combination of eval() and atob() - where base64-encoded data is being decoded and then executed as JavaScript code. This is a classic deobfuscation technique used by malware to hide its true payload. The base64 encoding conceals the malicious code from static analysis, and eval() brings it to life at runtime. This pattern is almost always malicious.",
        "severity": "high",
        "evidence": "eval(atob(",
        "confidence": 0.8,
        "full_line": "eval(atob(encryptedCode));",
        "category": "malware_signatures"
    },
    {
        "id": 188,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 22,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "packed",
        "confidence": 0.8,
        "full_line": "var packed = \"(function(){console.log('This is packed code');})();\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 189,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 23,
        "obfuscation_type": "eval_usage",
        "description": "Found usage of the eval() function, which executes arbitrary JavaScript code from a string. This is extremely dangerous as it allows dynamic code execution that can be controlled by external inputs. Eval is commonly used in obfuscated malware to hide malicious payloads and bypass static analysis. It's considered a major security risk and should never be used in production code.",
        "severity": "high",
        "evidence": "eval(",
        "confidence": 0.8,
        "full_line": "eval(packed);",
        "category": "runtime_obfuscation"
    },
    {
        "id": 190,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 26,
        "obfuscation_type": "base64_strings",
        "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
        "severity": "medium",
        "evidence": "ZnVuY3Rpb24gc2F5SGVsbG8oKSB7IGNvbnNvbGUubG9nKCJIZWxsbyBmcm9tIGVuY29kZWQgZnVuY3Rpb24iKTsgfSBzYXlIZWxs",
        "confidence": 0.8,
        "full_line": "var encodedFunc = \"ZnVuY3Rpb24gc2F5SGVsbG8oKSB7IGNvbnNvbGUubG9nKCJIZWxsbyBmcm9tIGVuY29kZWQgZnVuY3Rpb24iKTsgfSBzYXlIZWxsbygpOw==\";",
        "category": "string_obfuscation"
    },
    {
        "id": 191,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 26,
        "obfuscation_type": "encoded_urls",
        "description": "Potentially encoded URLs or data",
        "severity": "medium",
        "evidence": "ZnVuY3Rpb24gc2F5SGVsbG8oKSB7IGNvbnNvbGUubG9nKCJIZWxsbyBmcm9tIGVuY29kZWQgZnVuY3Rpb24iKTsgfSBzYXlIZWxs",
        "confidence": 0.8,
        "full_line": "var encodedFunc = \"ZnVuY3Rpb24gc2F5SGVsbG8oKSB7IGNvbnNvbGUubG9nKCJIZWxsbyBmcm9tIGVuY29kZWQgZnVuY3Rpb24iKTsgfSBzYXlIZWxsbygpOw==\";",
        "category": "suspicious_patterns"
    },
    {
        "id": 192,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 27,
        "obfuscation_type": "eval_usage",
        "description": "Found usage of the eval() function, which executes arbitrary JavaScript code from a string. This is extremely dangerous as it allows dynamic code execution that can be controlled by external inputs. Eval is commonly used in obfuscated malware to hide malicious payloads and bypass static analysis. It's considered a major security risk and should never be used in production code.",
        "severity": "high",
        "evidence": "eval(",
        "confidence": 0.8,
        "full_line": "eval(atob(encodedFunc));",
        "category": "runtime_obfuscation"
    },
    {
        "id": 193,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 27,
        "obfuscation_type": "suspicious_eval_patterns",
        "description": "Found the dangerous combination of eval() and atob() - where base64-encoded data is being decoded and then executed as JavaScript code. This is a classic deobfuscation technique used by malware to hide its true payload. The base64 encoding conceals the malicious code from static analysis, and eval() brings it to life at runtime. This pattern is almost always malicious.",
        "severity": "high",
        "evidence": "eval(atob(",
        "confidence": 0.8,
        "full_line": "eval(atob(encodedFunc));",
        "category": "malware_signatures"
    },
    {
        "id": 194,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 2,
        "obfuscation_type": "high_entropy_string",
        "description": "Found a string with very high information entropy (6.02 bits per character), which is unusual for human-readable text. Normal English text has entropy around 2.5-3.5, while compressed or encrypted data can reach 5.0+. This suggests the string contains encoded, compressed, or encrypted content that appears random to hide its true meaning. Malware commonly uses such techniques to conceal command strings, URLs, or executable code from casual inspection.",
        "severity": "medium",
        "evidence": "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwx...",
        "confidence": 1.0,
        "full_line": "var _0x4e5f = ['fromCharCode', 'apply', 'prototype', 'call', 'constructor', 'length', 'charCodeAt', 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=', ''];",
        "category": "string_obfuscation"
    },
    {
        "id": 195,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 18,
        "obfuscation_type": "high_entropy_string",
        "description": "Found a string with very high information entropy (4.76 bits per character), which is unusual for human-readable text. Normal English text has entropy around 2.5-3.5, while compressed or encrypted data can reach 5.0+. This suggests the string contains encoded, compressed, or encrypted content that appears random to hide its true meaning. Malware commonly uses such techniques to conceal command strings, URLs, or executable code from casual inspection.",
        "severity": "medium",
        "evidence": "dmFyIGhlbGxvID0gIkhlbGxvIFdvcmxkIjsgY29uc29sZS5sb2...",
        "confidence": 0.7930105639183228,
        "full_line": "var encryptedCode = \"dmFyIGhlbGxvID0gIkhlbGxvIFdvcmxkIjsgY29uc29sZS5sb2cocGVsbG8pOw==\";",
        "category": "string_obfuscation"
    },
    {
        "id": 196,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\packed-code.js",
        "line_number": 26,
        "obfuscation_type": "high_entropy_string",
        "description": "Found a string with very high information entropy (5.24 bits per character), which is unusual for human-readable text. Normal English text has entropy around 2.5-3.5, while compressed or encrypted data can reach 5.0+. This suggests the string contains encoded, compressed, or encrypted content that appears random to hide its true meaning. Malware commonly uses such techniques to conceal command strings, URLs, or executable code from casual inspection.",
        "severity": "medium",
        "evidence": "ZnVuY3Rpb24gc2F5SGVsbG8oKSB7IGNvbnNvbGUubG9nKCJIZW...",
        "confidence": 0.873270231083194,
        "full_line": "var encodedFunc = \"ZnVuY3Rpb24gc2F5SGVsbG8oKSB7IGNvbnNvbGUubG9nKCJIZWxsbyBmcm9tIGVuY29kZWQgZnVuY3Rpb24iKTsgfSBzYXlIZWxsbygpOw==\";",
        "category": "string_obfuscation"
    },
    {
        "id": 197,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 4,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "code",
        "confidence": 0.8,
        "full_line": "var code = \"console.log('Hello from eval!');\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 198,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 5,
        "obfuscation_type": "eval_usage",
        "description": "Found usage of the eval() function, which executes arbitrary JavaScript code from a string. This is extremely dangerous as it allows dynamic code execution that can be controlled by external inputs. Eval is commonly used in obfuscated malware to hide malicious payloads and bypass static analysis. It's considered a major security risk and should never be used in production code.",
        "severity": "high",
        "evidence": "eval(",
        "confidence": 0.8,
        "full_line": "eval(code);",
        "category": "runtime_obfuscation"
    },
    {
        "id": 199,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 8,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "b",
        "confidence": 0.8,
        "full_line": "var func = new Function(\"a\", \"b\", \"return a + b;\");",
        "category": "variable_obfuscation"
    },
    {
        "id": 200,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 8,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "b",
        "confidence": 0.8,
        "full_line": "var func = new Function(\"a\", \"b\", \"return a + b;\");",
        "category": "variable_obfuscation"
    },
    {
        "id": 201,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 8,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "func",
        "confidence": 0.8,
        "full_line": "var func = new Function(\"a\", \"b\", \"return a + b;\");",
        "category": "variable_obfuscation"
    },
    {
        "id": 202,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 8,
        "obfuscation_type": "function_constructor",
        "description": "Detected dynamic function creation using the Function constructor. This allows creating functions from strings at runtime, similar to eval(). While it can be useful for dynamic code generation, it's often abused by obfuscated malware to hide function logic and payloads. This makes it impossible to statically analyze what the function actually does.",
        "severity": "high",
        "evidence": "new Function(",
        "confidence": 0.8,
        "full_line": "var func = new Function(\"a\", \"b\", \"return a + b;\");",
        "category": "runtime_obfuscation"
    },
    {
        "id": 203,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 12,
        "obfuscation_type": "setTimeout_string",
        "description": "Found setTimeout being called with a string parameter instead of a function. This causes JavaScript to evaluate the string as code using eval(), which is a security risk. Legitimate code should pass function references instead of strings. This pattern is commonly used in obfuscated code to delay execution of malicious payloads.",
        "severity": "medium",
        "evidence": "setTimeout(\"",
        "confidence": 0.8,
        "full_line": "setTimeout(\"console.log('Delayed execution');\", 1000);",
        "category": "runtime_obfuscation"
    },
    {
        "id": 204,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 16,
        "obfuscation_type": "function_constructor",
        "description": "Detected dynamic function creation using the Function constructor. This allows creating functions from strings at runtime, similar to eval(). While it can be useful for dynamic code generation, it's often abused by obfuscated malware to hide function logic and payloads. This makes it impossible to statically analyze what the function actually does.",
        "severity": "high",
        "evidence": "new Function(",
        "confidence": 0.8,
        "full_line": "    return new Function(body);",
        "category": "runtime_obfuscation"
    },
    {
        "id": 205,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 23,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "prop",
        "confidence": 0.8,
        "full_line": "var prop = \"sec\" + \"ret\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 206,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 28,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "modules",
        "confidence": 0.8,
        "full_line": "    var modules = {",
        "category": "variable_obfuscation"
    },
    {
        "id": 207,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 29,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "b",
        "confidence": 0.8,
        "full_line": "        \"math\": { add: function(a,b) { return a+b; } },",
        "category": "variable_obfuscation"
    },
    {
        "id": 208,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 29,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "add (+1 more)",
        "confidence": 0.9,
        "full_line": "        \"math\": { add: function(a,b) { return a+b; } },",
        "category": "variable_obfuscation"
    },
    {
        "id": 209,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 30,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "upper",
        "confidence": 0.8,
        "full_line": "        \"string\": { upper: function(s) { return s.toUpperCase(); } }",
        "category": "variable_obfuscation"
    },
    {
        "id": 210,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 34,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "math",
        "confidence": 0.8,
        "full_line": "var math = loadModule(\"math\");",
        "category": "variable_obfuscation"
    },
    {
        "id": 211,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 38,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "require",
        "confidence": 0.8,
        "full_line": "var require = function(module) {",
        "category": "variable_obfuscation"
    },
    {
        "id": 212,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 39,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "modules",
        "confidence": 0.8,
        "full_line": "    var modules = {",
        "category": "variable_obfuscation"
    },
    {
        "id": 213,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 40,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "readFile",
        "confidence": 0.8,
        "full_line": "        \"fs\": { readFile: function() { return \"file content\"; } },",
        "category": "variable_obfuscation"
    },
    {
        "id": 214,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 41,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "hash",
        "confidence": 0.8,
        "full_line": "        \"crypto\": { hash: function() { return \"hashed\"; } }",
        "category": "variable_obfuscation"
    },
    {
        "id": 215,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 48,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    var result = \"\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 216,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 50,
        "obfuscation_type": "char_code_strings",
        "description": "Identified String.fromCharCode() being called with a very long list of numeric arguments. This function converts ASCII character codes back to readable text. Malware often uses this to hide strings by representing them as arrays of numbers, making the malicious content invisible to casual inspection. The long argument list suggests substantial hidden content that could be command strings, URLs, or executable code.",
        "severity": "high",
        "evidence": "String.fromCharCode(encrypted.charCodeAt(i)",
        "confidence": 0.8,
        "full_line": "        result += String.fromCharCode(encrypted.charCodeAt(i) ^ key);",
        "category": "malware_signatures"
    },
    {
        "id": 217,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 52,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    return result;",
        "category": "variable_obfuscation"
    },
    {
        "id": 218,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 54,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "encrypted",
        "confidence": 0.8,
        "full_line": "var encrypted = \"KRYE\"; // \"HELP\" XORed with key 42",
        "category": "variable_obfuscation"
    },
    {
        "id": 219,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 59,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "code",
        "confidence": 0.8,
        "full_line": "    var code = \"return 42;\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 220,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 61,
        "obfuscation_type": "function_constructor",
        "description": "Detected dynamic function creation using the Function constructor. This allows creating functions from strings at runtime, similar to eval(). While it can be useful for dynamic code generation, it's often abused by obfuscated malware to hide function logic and payloads. This makes it impossible to statically analyze what the function actually does.",
        "severity": "high",
        "evidence": "new Function(",
        "confidence": 0.8,
        "full_line": "    selfModifying = new Function(code);",
        "category": "runtime_obfuscation"
    },
    {
        "id": 221,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 66,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "handler",
        "confidence": 0.8,
        "full_line": "var handler = {",
        "category": "variable_obfuscation"
    },
    {
        "id": 222,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 67,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "get",
        "confidence": 0.8,
        "full_line": "    get: function(target, prop) {",
        "category": "variable_obfuscation"
    },
    {
        "id": 223,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 71,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "prop",
        "confidence": 0.8,
        "full_line": "        return \"obfuscated_\" + prop;",
        "category": "variable_obfuscation"
    },
    {
        "id": 224,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 84,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "weakMap",
        "confidence": 0.8,
        "full_line": "var weakMap = new WeakMap();",
        "category": "variable_obfuscation"
    },
    {
        "id": 225,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 85,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "key",
        "confidence": 0.8,
        "full_line": "var key = {};",
        "category": "variable_obfuscation"
    },
    {
        "id": 226,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 91,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "template",
        "confidence": 0.8,
        "full_line": "    var template = `",
        "category": "variable_obfuscation"
    },
    {
        "id": 227,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 93,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "            var result = 0;",
        "category": "variable_obfuscation"
    },
    {
        "id": 228,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 95,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "            return result;",
        "category": "variable_obfuscation"
    },
    {
        "id": 229,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 97,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "generated",
        "confidence": 0.8,
        "full_line": "        return generated;",
        "category": "variable_obfuscation"
    },
    {
        "id": 230,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 99,
        "obfuscation_type": "eval_usage",
        "description": "Found usage of the eval() function, which executes arbitrary JavaScript code from a string. This is extremely dangerous as it allows dynamic code execution that can be controlled by external inputs. Eval is commonly used in obfuscated malware to hide malicious payloads and bypass static analysis. It's considered a major security risk and should never be used in production code.",
        "severity": "high",
        "evidence": "eval(",
        "confidence": 0.8,
        "full_line": "    return eval(template);",
        "category": "runtime_obfuscation"
    },
    {
        "id": 231,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 102,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "operations",
        "confidence": 0.8,
        "full_line": "var operations = [\"result += 1;\", \"result *= 2;\", \"result += 10;\"];",
        "category": "variable_obfuscation"
    },
    {
        "id": 232,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 103,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "operations",
        "confidence": 0.8,
        "full_line": "var generatedFunc = generateCode({operations: operations});",
        "category": "variable_obfuscation"
    },
    {
        "id": 233,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 22,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "obj",
        "confidence": 0.6,
        "full_line": "var obj = { secret: \"hidden\" };",
        "category": "variable_obfuscation"
    },
    {
        "id": 234,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 85,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "key",
        "confidence": 0.6,
        "full_line": "var key = {};",
        "category": "variable_obfuscation"
    },
    {
        "id": 235,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 67,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "get",
        "confidence": 0.6,
        "full_line": "    get: function(target, prop) {",
        "category": "variable_obfuscation"
    },
    {
        "id": 236,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 103,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. Variable 'operations' has high entropy (3.12), suggesting the code may have been processed through an obfuscation tool.",
        "severity": "medium",
        "evidence": "operations",
        "confidence": 0.7804820237218405,
        "full_line": "var generatedFunc = generateCode({operations: operations});",
        "category": "variable_obfuscation"
    },
    {
        "id": 237,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\runtime-obfuscation.js",
        "line_number": 29,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "add",
        "confidence": 0.6,
        "full_line": "        \"math\": { add: function(a,b) { return a+b; } },",
        "category": "variable_obfuscation"
    },
    {
        "id": 238,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 4,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "encoded",
        "confidence": 0.8,
        "full_line": "var encoded = \"SGVsbG8gV29ybGQ=\"; // \"Hello World\" in base64",
        "category": "variable_obfuscation"
    },
    {
        "id": 239,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 5,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "decoded",
        "confidence": 0.8,
        "full_line": "var decoded = atob(encoded);",
        "category": "variable_obfuscation"
    },
    {
        "id": 240,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 9,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "hexString",
        "confidence": 0.8,
        "full_line": "var hexString = \"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\"; // \"Hello World\" in hex",
        "category": "variable_obfuscation"
    },
    {
        "id": 241,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 9,
        "obfuscation_type": "obfuscated_vars",
        "description": "Identified variable names combining short letters with numbers (like 'a1', 'x2', 'b10'). This naming pattern is characteristic of code that has been automatically minified or obfuscated, making it difficult for humans to understand variable purposes and relationships.",
        "severity": "low",
        "evidence": "x48 (+5 more)",
        "confidence": 0.9,
        "full_line": "var hexString = \"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\"; // \"Hello World\" in hex",
        "category": "variable_obfuscation"
    },
    {
        "id": 242,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 9,
        "obfuscation_type": "hex_strings",
        "description": "Found hexadecimal escape sequences (\\\\xXX format) in strings. These are used to represent characters by their ASCII/hexadecimal values. While occasionally legitimate for encoding special characters, patterns of hex escapes often indicate attempts to obscure readable text or hide malicious payloads by making them appear as binary data rather than human-readable strings.",
        "severity": "medium",
        "evidence": "\\x48 (+10 more)",
        "confidence": 0.9,
        "full_line": "var hexString = \"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\"; // \"Hello World\" in hex",
        "category": "string_obfuscation"
    },
    {
        "id": 243,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 13,
        "obfuscation_type": "octal_escapes",
        "description": "Detected octal escape sequences (\\\\XXX format where X is 0-7). These represent characters by their octal (base-8) ASCII values. While sometimes used for legitimate purposes like encoding control characters, this encoding method is often employed to make strings less readable and hide potentially malicious content from automated detection and human reviewers.",
        "severity": "medium",
        "evidence": "\\110 (+10 more)",
        "confidence": 0.9,
        "full_line": "var octalString = \"\\110\\145\\154\\154\\157\\40\\127\\157\\162\\154\\144\"; // \"Hello World\" in octal",
        "category": "string_obfuscation"
    },
    {
        "id": 244,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 17,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "unicodeStr",
        "confidence": 0.8,
        "full_line": "var unicodeStr = \"\\u0048\\u0065\\u006c\\u006c\\u006f\\u0020\\u0057\\u006f\\u0072\\u006c\\u0064\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 245,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 17,
        "obfuscation_type": "obfuscated_vars",
        "description": "Identified variable names combining short letters with numbers (like 'a1', 'x2', 'b10'). This naming pattern is characteristic of code that has been automatically minified or obfuscated, making it difficult for humans to understand variable purposes and relationships.",
        "severity": "low",
        "evidence": "u0048 (+5 more)",
        "confidence": 0.9,
        "full_line": "var unicodeStr = \"\\u0048\\u0065\\u006c\\u006c\\u006f\\u0020\\u0057\\u006f\\u0072\\u006c\\u0064\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 246,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 17,
        "obfuscation_type": "unicode_escapes",
        "description": "Identified Unicode escape sequences (\\\\uXXXX format) in the code. Unicode escapes can be legitimate for internationalization, but excessive use or unusual patterns may indicate attempts to hide readable text by representing it in a less obvious encoded format. This technique makes it harder to spot malicious strings during code review.",
        "severity": "medium",
        "evidence": "\\u0048 (+10 more)",
        "confidence": 0.9,
        "full_line": "var unicodeStr = \"\\u0048\\u0065\\u006c\\u006c\\u006f\\u0020\\u0057\\u006f\\u0072\\u006c\\u0064\";",
        "category": "string_obfuscation"
    },
    {
        "id": 247,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 27,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "str",
        "confidence": 0.8,
        "full_line": "var str = String.fromCharCode(72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100);",
        "category": "variable_obfuscation"
    },
    {
        "id": 248,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 27,
        "obfuscation_type": "char_code_strings",
        "description": "Identified String.fromCharCode() being called with a very long list of numeric arguments. This function converts ASCII character codes back to readable text. Malware often uses this to hide strings by representing them as arrays of numbers, making the malicious content invisible to casual inspection. The long argument list suggests substantial hidden content that could be command strings, URLs, or executable code.",
        "severity": "high",
        "evidence": "String.fromCharCode(72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100)",
        "confidence": 0.8,
        "full_line": "var str = String.fromCharCode(72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100);",
        "category": "malware_signatures"
    },
    {
        "id": 249,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 31,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "a (+1 more)",
        "confidence": 0.9,
        "full_line": "var a = \"Wor\", b = \"ld\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 250,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 31,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "a (+1 more)",
        "confidence": 0.9,
        "full_line": "var a = \"Wor\", b = \"ld\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 251,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 35,
        "obfuscation_type": "base64_strings",
        "description": "Detected long sequences of base64-encoded data. While base64 encoding has legitimate uses (like encoding binary data for transmission), unusually long base64 strings in source code often indicate attempts to hide readable text or binary payloads from casual inspection. This is commonly used by malware to conceal command strings, URLs, or executable code.",
        "severity": "medium",
        "evidence": "XHg0OFx4NjVceDY0XHg2NFx4NjdceDIwXHg1N1x4NmZceDcyXHg2Y1x4NjQ=",
        "confidence": 0.8,
        "full_line": "var doubleEncoded = \"XHg0OFx4NjVceDY0XHg2NFx4NjdceDIwXHg1N1x4NmZceDcyXHg2Y1x4NjQ=\"; // base64 of hex string",
        "category": "string_obfuscation"
    },
    {
        "id": 252,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 35,
        "obfuscation_type": "encoded_urls",
        "description": "Potentially encoded URLs or data",
        "severity": "medium",
        "evidence": "XHg0OFx4NjVceDY0XHg2NFx4NjdceDIwXHg1N1x4NmZceDcyXHg2Y1x4NjQ",
        "confidence": 0.8,
        "full_line": "var doubleEncoded = \"XHg0OFx4NjVceDY0XHg2NFx4NjdceDIwXHg1N1x4NmZceDcyXHg2Y1x4NjQ=\"; // base64 of hex string",
        "category": "suspicious_patterns"
    },
    {
        "id": 253,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 41,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "c (+1 more)",
        "confidence": 0.9,
        "full_line": "        return String.fromCharCode((c <= \"Z\" ? 90 : 122) >= (c = c.charCodeAt(0) + 13) ? c : c - 26);",
        "category": "variable_obfuscation"
    },
    {
        "id": 254,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 41,
        "obfuscation_type": "char_code_strings",
        "description": "Identified String.fromCharCode() being called with a very long list of numeric arguments. This function converts ASCII character codes back to readable text. Malware often uses this to hide strings by representing them as arrays of numbers, making the malicious content invisible to casual inspection. The long argument list suggests substantial hidden content that could be command strings, URLs, or executable code.",
        "severity": "high",
        "evidence": "String.fromCharCode((c <= \"Z\" ? 90 : 122)",
        "confidence": 0.8,
        "full_line": "        return String.fromCharCode((c <= \"Z\" ? 90 : 122) >= (c = c.charCodeAt(0) + 13) ? c : c - 26);",
        "category": "malware_signatures"
    },
    {
        "id": 255,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 48,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    var result = \"\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 256,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 52,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    return result;",
        "category": "variable_obfuscation"
    },
    {
        "id": 257,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 54,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "xorStr",
        "confidence": 0.8,
        "full_line": "var xorStr = xorEncode(\"Hello World\", 42);",
        "category": "variable_obfuscation"
    },
    {
        "id": 258,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 31,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "b",
        "confidence": 0.7,
        "full_line": "var a = \"Wor\", b = \"ld\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 259,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 47,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "str",
        "confidence": 0.6,
        "full_line": "function xorEncode(str, key) {",
        "category": "variable_obfuscation"
    },
    {
        "id": 260,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 47,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "key",
        "confidence": 0.6,
        "full_line": "function xorEncode(str, key) {",
        "category": "variable_obfuscation"
    },
    {
        "id": 261,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 41,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "c",
        "confidence": 0.7,
        "full_line": "        return String.fromCharCode((c <= \"Z\" ? 90 : 122) >= (c = c.charCodeAt(0) + 13) ? c : c - 26);",
        "category": "variable_obfuscation"
    },
    {
        "id": 262,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.js",
        "line_number": 31,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "a",
        "confidence": 0.7,
        "full_line": "var a = \"Wor\", b = \"ld\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 263,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 4,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "a (+4 more)",
        "confidence": 0.9,
        "full_line": "var a = 1, b = 2, c = 3, d = a + b + c;",
        "category": "variable_obfuscation"
    },
    {
        "id": 264,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 4,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "a (+4 more)",
        "confidence": 0.9,
        "full_line": "var a = 1, b = 2, c = 3, d = a + b + c;",
        "category": "variable_obfuscation"
    },
    {
        "id": 265,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 9,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "qwerty",
        "confidence": 0.8,
        "full_line": "var qwerty = \"password\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 266,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 10,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "asdfgh",
        "confidence": 0.8,
        "full_line": "var asdfgh = \"username\";",
        "category": "variable_obfuscation"
    },
    {
        "id": 267,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 11,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "zxcvbn (+1 more)",
        "confidence": 0.9,
        "full_line": "var zxcvbn = qwerty + asdfgh;",
        "category": "variable_obfuscation"
    },
    {
        "id": 268,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 15,
        "obfuscation_type": "suspicious_hex",
        "description": "Very long hexadecimal numbers",
        "severity": "low",
        "evidence": "0x1a2b3c4d5e6f",
        "confidence": 0.8,
        "full_line": "var _0x1a2b3c4d5e6f = \"secret\";",
        "category": "suspicious_patterns"
    },
    {
        "id": 269,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 15,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x1a2b3c4d5e6f",
        "confidence": 0.8,
        "full_line": "var _0x1a2b3c4d5e6f = \"secret\";",
        "category": "malware_signatures"
    },
    {
        "id": 270,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 16,
        "obfuscation_type": "suspicious_hex",
        "description": "Very long hexadecimal numbers",
        "severity": "low",
        "evidence": "0x1a2b3c4d5e6f",
        "confidence": 0.8,
        "full_line": "var $$_aaBBcc = function() { return _0x1a2b3c4d5e6f; };",
        "category": "suspicious_patterns"
    },
    {
        "id": 271,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 16,
        "obfuscation_type": "obfuscated_function_names",
        "description": "Detected function or variable names following the pattern '_0x' followed by hexadecimal digits. This is a signature of the popular JavaScript obfuscator 'obfuscator.io', which automatically generates these machine-readable names to replace meaningful human-readable identifiers. Such patterns strongly suggest the code has been processed through commercial obfuscation tools, potentially to hide malicious functionality.",
        "severity": "high",
        "evidence": "_0x1a2b3c4d5e6f",
        "confidence": 0.8,
        "full_line": "var $$_aaBBcc = function() { return _0x1a2b3c4d5e6f; };",
        "category": "malware_signatures"
    },
    {
        "id": 272,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 39,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "propA",
        "confidence": 0.8,
        "full_line": "        this.propA = 1;",
        "category": "variable_obfuscation"
    },
    {
        "id": 273,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 40,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "propB",
        "confidence": 0.8,
        "full_line": "        this.propB = 2;",
        "category": "variable_obfuscation"
    },
    {
        "id": 274,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 41,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "propC",
        "confidence": 0.8,
        "full_line": "        this.propC = 3;",
        "category": "variable_obfuscation"
    },
    {
        "id": 275,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 43,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "propA",
        "confidence": 0.8,
        "full_line": "    methodX() { return this.propA; }",
        "category": "variable_obfuscation"
    },
    {
        "id": 276,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 44,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "propB",
        "confidence": 0.8,
        "full_line": "    methodY() { return this.propB; }",
        "category": "variable_obfuscation"
    },
    {
        "id": 277,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 45,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "propC",
        "confidence": 0.8,
        "full_line": "    methodZ() { return this.propC; }",
        "category": "variable_obfuscation"
    },
    {
        "id": 278,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 59,
        "obfuscation_type": "always_true",
        "description": "Detected an 'if (true)' condition that is always true. This creates unnecessary conditional logic that doesn't actually branch. While occasionally used for code organization, this pattern often indicates attempts to make the code appear more complex or to prepare for future obfuscation transformations that would make the condition more complex.",
        "severity": "low",
        "evidence": "if (true)",
        "confidence": 0.8,
        "full_line": "    if (true) {",
        "category": "control_flow_obfuscation"
    },
    {
        "id": 279,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 49,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. Variable 'module123' has high entropy (3.17), suggesting the code may have been processed through an obfuscation tool.",
        "severity": "medium",
        "evidence": "module123",
        "confidence": 0.792481250360578,
        "full_line": "var module123 = {",
        "category": "variable_obfuscation"
    },
    {
        "id": 280,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 4,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "c",
        "confidence": 0.7,
        "full_line": "var a = 1, b = 2, c = 3, d = a + b + c;",
        "category": "variable_obfuscation"
    },
    {
        "id": 281,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 4,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "a",
        "confidence": 0.7,
        "full_line": "var a = 1, b = 2, c = 3, d = a + b + c;",
        "category": "variable_obfuscation"
    },
    {
        "id": 282,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 4,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "d",
        "confidence": 0.7,
        "full_line": "var a = 1, b = 2, c = 3, d = a + b + c;",
        "category": "variable_obfuscation"
    },
    {
        "id": 283,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\variable-obfuscation.js",
        "line_number": 4,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "b",
        "confidence": 0.7,
        "full_line": "var a = 1, b = 2, c = 3, d = a + b + c;",
        "category": "variable_obfuscation"
    },
    {
        "id": 284,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 6,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "encoded",
        "confidence": 0.8,
        "full_line": "encoded = \"SGVsbG8gV29ybGQ=\"  # \"Hello World\" in base64",
        "category": "variable_obfuscation"
    },
    {
        "id": 285,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 7,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "decoded",
        "confidence": 0.8,
        "full_line": "decoded = base64.b64decode(encoded).decode()",
        "category": "variable_obfuscation"
    },
    {
        "id": 286,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 11,
        "obfuscation_type": "obfuscated_vars",
        "description": "Identified variable names combining short letters with numbers (like 'a1', 'x2', 'b10'). This naming pattern is characteristic of code that has been automatically minified or obfuscated, making it difficult for humans to understand variable purposes and relationships.",
        "severity": "low",
        "evidence": "x48 (+5 more)",
        "confidence": 0.9,
        "full_line": "hex_string = \"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\"  # \"Hello World\" in hex",
        "category": "variable_obfuscation"
    },
    {
        "id": 287,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 11,
        "obfuscation_type": "hex_strings",
        "description": "Found hexadecimal escape sequences (\\\\xXX format) in strings. These are used to represent characters by their ASCII/hexadecimal values. While occasionally legitimate for encoding special characters, patterns of hex escapes often indicate attempts to obscure readable text or hide malicious payloads by making them appear as binary data rather than human-readable strings.",
        "severity": "medium",
        "evidence": "\\x48 (+10 more)",
        "confidence": 0.9,
        "full_line": "hex_string = \"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\"  # \"Hello World\" in hex",
        "category": "string_obfuscation"
    },
    {
        "id": 288,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 15,
        "obfuscation_type": "obfuscated_vars",
        "description": "Identified variable names combining short letters with numbers (like 'a1', 'x2', 'b10'). This naming pattern is characteristic of code that has been automatically minified or obfuscated, making it difficult for humans to understand variable purposes and relationships.",
        "severity": "low",
        "evidence": "u0048 (+5 more)",
        "confidence": 0.9,
        "full_line": "unicode_str = \"\\u0048\\u0065\\u006c\\u006c\\u006f\\u0020\\u0057\\u006f\\u0072\\u006c\\u0064\"",
        "category": "variable_obfuscation"
    },
    {
        "id": 289,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 15,
        "obfuscation_type": "unicode_escapes",
        "description": "Identified Unicode escape sequences (\\\\uXXXX format) in the code. Unicode escapes can be legitimate for internationalization, but excessive use or unusual patterns may indicate attempts to hide readable text by representing it in a less obvious encoded format. This technique makes it harder to spot malicious strings during code review.",
        "severity": "medium",
        "evidence": "\\u0048 (+10 more)",
        "confidence": 0.9,
        "full_line": "unicode_str = \"\\u0048\\u0065\\u006c\\u006c\\u006f\\u0020\\u0057\\u006f\\u0072\\u006c\\u0064\"",
        "category": "string_obfuscation"
    },
    {
        "id": 290,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 25,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "chars",
        "confidence": 0.8,
        "full_line": "chars = [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]",
        "category": "variable_obfuscation"
    },
    {
        "id": 291,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 26,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "result = ''.join(chr(c) for c in chars)",
        "category": "variable_obfuscation"
    },
    {
        "id": 292,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 30,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "a",
        "confidence": 0.8,
        "full_line": "a = \"Wor\"",
        "category": "variable_obfuscation"
    },
    {
        "id": 293,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 30,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "a",
        "confidence": 0.8,
        "full_line": "a = \"Wor\"",
        "category": "variable_obfuscation"
    },
    {
        "id": 294,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 31,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "b",
        "confidence": 0.8,
        "full_line": "b = \"ld\"",
        "category": "variable_obfuscation"
    },
    {
        "id": 295,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 31,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "b",
        "confidence": 0.8,
        "full_line": "b = \"ld\"",
        "category": "variable_obfuscation"
    },
    {
        "id": 296,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 35,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "template",
        "confidence": 0.8,
        "full_line": "template = \"Hell{} {}{}\"",
        "category": "variable_obfuscation"
    },
    {
        "id": 297,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 40,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "result",
        "confidence": 0.8,
        "full_line": "    result = []",
        "category": "variable_obfuscation"
    },
    {
        "id": 298,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 43,
        "obfuscation_type": "random_vars",
        "description": "Found seemingly random variable names that appear computer-generated rather than human-chosen. This suggests the code may have been processed through an obfuscation tool that replaces meaningful names with gibberish to hide the code's true functionality.",
        "severity": "medium",
        "evidence": "base",
        "confidence": 0.8,
        "full_line": "            base = ord('A') if char.isupper() else ord('a')",
        "category": "variable_obfuscation"
    },
    {
        "id": 299,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 31,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "b",
        "confidence": 0.7,
        "full_line": "b = \"ld\"",
        "category": "variable_obfuscation"
    },
    {
        "id": 300,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 30,
        "obfuscation_type": "single_char_vars",
        "description": "Found single-letter variable names like 'a', 'b', 'x'. While sometimes acceptable for simple counters or math variables, this pattern is commonly used in obfuscated code to make it harder to understand the program's logic and purpose.",
        "severity": "low",
        "evidence": "a",
        "confidence": 0.7,
        "full_line": "a = \"Wor\"",
        "category": "variable_obfuscation"
    },
    {
        "id": 301,
        "file_path": "F:\\disruptiq-notes\\obfuscation-checker-agent\\example-repo\\string-obfuscation.py",
        "line_number": 52,
        "obfuscation_type": "short_meaningless_vars",
        "description": "Detected very short variable names (1-3 characters) that don't convey meaning. Legitimate code usually uses descriptive names that explain what the variable represents, making code self-documenting and easier to maintain.",
        "severity": "low",
        "evidence": "key",
        "confidence": 0.6,
        "full_line": "def xor_encode(text, key):",
        "category": "variable_obfuscation"
    }
  ],
  "summary": {
    "high_severity": 51,
    "medium_severity": 155,
    "low_severity": 95,
    "total_findings": 301,
    "average_confidence": 0.802,
    "risk_score": 452.8,
    "categories": {"anti_analysis": 6, "variable_obfuscation": 205, "runtime_obfuscation": 14, "string_obfuscation": 21, "suspicious_patterns": 8, "malware_signatures": 40, "control_flow_obfuscation": 4, "structure_obfuscation": 3}
  },
  "scan_duration_seconds": 4.57,
  "risk_assessment": "CRITICAL: High likelihood of malicious obfuscation"
}
