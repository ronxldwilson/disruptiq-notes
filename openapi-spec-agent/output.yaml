yaml
openapi: 3.0.0
info:
  title: User API
  version: 1.0.0
  description: API for managing user data.
paths:
  /users:
    get:
      summary: Get all users.
      description: Retrieves a list of all users.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user.
      description: Creates a new user.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the new user.
                email:
                  type: string
                  description: The email address of the new user.
              required:
                - username
                - email
              example:
                username: "john.doe"
                email: "john.doe@example.com"
      responses:
        '201':
          description: User created successfully.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request.
          content:
            'application/json':
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: "Username or email is missing."

  /users/{user_id}:
    get:
      summary: Get a specific user by ID.
      description: Retrieves a specific user based on their ID.
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
            minimum: 1
          description: The ID of the user to retrieve.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
          content:
            'application/json':
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: "User not found."
    put:
      summary: Update a specific user by ID.
      description: Updates a specific user based on their ID.
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
            minimum: 1
          description: The ID of the user to update.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The new username of the user.
                email:
                  type: string
                  description: The new email address of the user.
              required:
                - username
                - email
              example:
                username: "jane.doe"
                email: "jane.doe@example.com"
      responses:
        '200':
          description: User updated successfully.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
          content:
            'application/json':
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: "User not found."
        '400':
          description: Bad request.
          content:
            'application/json':
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: "Username or email is missing."

  /login:
    post:
      summary: Login.
      description: Authenticates a user.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username.
                password:
                  type: string
                  description: The password.
              required:
                - username
                - password
              example:
                username: "testuser"
                password: "password123"
      responses:
        '200':
          description: Successful login.
          content:
            'application/json':
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Authentication token.
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Unauthorized.
          content:
            'application/json':
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: "Invalid username or password."
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the user.
        username:
          type: string
          description: The username of the user.
        email:
          type: string
          description: The email address of the user.
