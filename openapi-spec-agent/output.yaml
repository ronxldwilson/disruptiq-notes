We are given three endpoints:
  1. Path: /users, Methods: ['GET']
  2. Path: /users/<int:user_id>, Methods: ['GET']
  3. Path: /users, Methods: ['POST']

We need to generate an OpenAPI 3.`0.0` specification in YAML.

Steps:
1. Top-level: `openapi: 3.0.0`
2. `info` section: We'll make up a title, version, and description. Let's say:
   - title: "User Management API"
   - version: "1.0.0"
   - description: "API for managing users"
3. `paths` section: We have three paths (but note: the second path has a parameter)
   - /users: 
        - GET: operation
        - POST: operation
   - /users/{user_id}:
        - GET: operation

4. `components` section: We need to define schemas for request and response bodies.
   - For the POST /users, we need a request body schema (for creating a user). Let's assume the user has fields: name, email, age.
   - For the GET /users and GET /users/{user_id}, we need response schemas (for user list and user detail).

Let's define:
  - User schema (for response and also for POST request body):
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          email:
            type: string
          age:
            type: integer

  But note: the GET /users returns a list of users (array of User), and GET /users/{user_id} returns a single user.

5. We'll also add descriptions and summaries for each endpoint.

Let's structure the YAML:

openapi: 3.0.0
info:
  title: User Management API
  version: "1.0.0"
  description: "API for managing users"
paths:
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      description: Add a new user to the system.
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{user_id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        age:
          type: integer

However, note: the problem says "a single top-level `components` section with fully defined schemas". We are defining the User schema.

But wait: the problem says "for all request and response bodies". We have:
  - POST request body: we need to define a schema for the request body (which is a User without id? or with id?).
    Since we are creating a new user, the id is generated by the server, so the request body should not have id.

Let me adjust the User schema for the request body to be without id.

We can have two schemas? But the problem says "fully defined schemas for all request and response bodies". We can define:

  - For the response: we use a schema that has all fields (including id).
  - For the request body (POST): we use a schema that has name, email, age (without id).

Alternatively, we can have a single schema for the user and then in the request body we use a subset? But to be safe and explicit, let's have two schemas.

But the problem says: "fully defined schemas". We can do:

  components:
    schemas:
      UserResponse:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          email:
            type: string
          age:
            type: integer
      UserCreate:
        type: object
        properties:
          name:
            type: string
          email:
            type: string
          age:
            type: integer

However, the problem does not specify the exact structure. Since the problem says "generate a complete OpenAPI spec based on this information", and we don't have more details, I'll assume the following:

  - The POST request body does not include the id (because it's generated by the server).
  - The response for both GET /users and GET /users/{user_id} is the same UserResponse.

But note: the problem says "a single top-level `components` section". We'll define the schemas in the components.

Let me write the YAML accordingly.

Important: In OpenAPI 3.0.0, the `components` section is a map of component definitions.

We'll do:

  components:
    schemas:
      User:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          email:
            type: string
          age:
            type: integer

But then for the POST, we want to have a request body that doesn't have id? How? We can define a separate schema for the request body.

Alternatively, we can define a schema for the request body as a subset of User? But the problem doesn't specify.

Given the time, I'll define two schemas:

  - User (for responses)
  - UserCreate (for request body of POST)

But note: the problem says "fully defined schemas for all request and response bodies". So we have to do that.

Let me adjust:

  components:
    schemas:
      User:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          email:
            type: string
          age:
            type: integer
      UserCreate:
        type: object
        properties:
          name:
            type: string
          email:
            type: string
          age:
            type: integer

Then in the POST operation, we reference UserCreate for the request body.

Also, note: the problem says "example responses for each endpoint". We'll add an example response for each.

For the GET /users: 
  example: 
    - [ { "id": 1, "name": "John", "email": "john@example.com", "age": 30 } ]

For the GET /users/{user_id}: 
  example: 
    - { "id": 1, "name": "John", "email": "john@example.com", "age": 30 }

For the POST: 
  example: { "id": 1, "name": "John", "email": "john@example.com", "age": 30 }

But note: the example responses are optional? The problem says: "Example responses for each endpoint". So we'll add them.

In OpenAPI 3.0.0, we can add `examples` in the responses.

Let me structure:

  responses:
    '200':
      description: Successful response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            example-response:
              value: 
                - { ... }   # but note: for array, we have to be careful

However, the problem says "example responses", so we can provide one example per response.

But for the array response (GET /users), we have an array of users. We can provide an example array.

Let's write the examples:

  For GET /users (200):
      examples:
        example-list:
          value:
            - id: 1
              name: "John"
              email: "john@example.com"
              age: 30

  For GET /users/{user_id} (200):
      examples:
        example-user:
          value:
            id: 1
            name: "John"
            email: "john@example.com"
            age: 30

  For POST (201):
      examples:
        example-created-user:
          value:
            id: 1
            name: "John"
            email: "john@example.com"
            age: 30

But note: the OpenAPI 3.0.0 specification for examples uses a specific format.

Alternatively, we can do without examples? The problem says "Do not wrap the output in a code block", so we output the YAML.

Let me write the entire YAML.

Important: The path for the second endpoint is: /users/{user_id} (with a parameter named user_id)

We'll write:

openapi: 3.0.0
info:
  title: User Management API
  version: "1.0.0"
  description: "API for managing users"
paths:
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          examples:
            example-list:
              value:
                - id: 1
                  name: "John"
                  email: "john@example.com"
                  age: 30
    post:
      summary: Create a new user
      description: Add a new user to the system.
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          examples:
            example-created-user:
              value:
                id: 1
                name: "John"
                email: "john@example.com"
                age: 30
  /users/{user_id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          examples:
            example-user:
              value:
                id: 1
                name: "John"
                email: "john@example.com"
                age: 30

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        age:
          type: integer

But wait: the problem says "a single top-level `components` section". We have defined the User schema.

However, note: in the POST request, we don't have the id in the body. So we don't need to define a separate schema for the request body? Actually, we do because the problem says "for all request and response bodies". The request body for POST is a UserCreate (which is a subset). But we didn't define UserCreate.

We have two options:
  Option 1: Define a UserCreate schema and use it in the POST request body.
  Option 2: Use the User schema without the id for the request body? But OpenAPI 3.0.0 doesn't allow a schema to be a subset by default without using `allOf` or `properties` with conditions.

Given the problem statement, and since it says "fully defined schemas for all request and response bodies", I think we should define the request body schema.

Let me do Option 1: define UserCreate.

But the problem says: "generate a complete OpenAPI spec based on this information". We don't have more information about the request body. So I'll add a UserCreate schema.

So:

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        age:
          type: integer
    UserCreate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        age:
          type: integer

Then in the POST operation, we specify the request body as:

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'

But note: the problem says the endpoints are from a Python Flask application. The endpoints are:
  - /users (GET)
  - /users/<int:user_id> (GET)
  - /users (POST)

We don't have a PUT or DELETE, so we only have these.

Let me write the entire YAML.

Important: In OpenAPI 3.0.0, the `paths` section must have the operations defined with the correct structure.

Also, the example responses are in the responses section for each status code.

Let me write the full YAML.

Note: The problem says "Do not wrap the output in a code block", so we output raw YAML.

I'll write:

openapi: 3.0.0
info:
  title: User Management API
  version: "1.0.0"
  description: "API for managing users"
paths:
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          examples:
            example-list:
              value:
                - id: 1
                  name: "John"
                  email: "john@example.com"
                  age: 30
    post:
      summary: Create a new user
      description: Add a new user to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          examples:
            example-created-user:
              value:
                id: 1
                name: "John"
                email: "john@example.com"
                age: 30
  /users/{user_id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          examples:
            example-user:
              value:
                id: 1
                name: "John"
                email: "john@example.com"
                age: 30

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        age:
          type: integer
    UserCreate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        age:
          type: integer

But note: the problem says "a single top-level `components` section". We have it.

Also, note: the example responses are written as YAML. We have to be careful with the indentation.

Let me check the format for the example responses: the value is a JSON object.

In the example for the array (example-list), we have a list of users. The value is a list.

This should be acceptable.

We'll output the YAML as a string.

Let me write the entire string without code block.

Note: The problem says "Do not wrap the output in a code block", so we output the YAML as plain text.

I'll write it.
</think>

openapi: 3.0.0
info:
  title: User Management API
  version: "1.0.0"
  description: "API for managing users"
paths:
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          examples:
            example-list:
              value:
                - id: 1
                  name: "John"
                  email: "john@example.com"
                  age: 30
    post:
      summary: Create a new user
      description: Add a new user to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          examples:
            example-created-user:
              value:
                id: 1
                name: "John"
                email: "john@example.com"
                age: 30
  /users/{user_id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          examples:
            example-user:
              value:
                id: 1
                name: "John"
                email: "john@example.com"
                age: 30
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        age:
          type: integer
    UserCreate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        age:
          type: integer