yaml
openapi: 3.0.0
info:
  title: My API
  version: 1.0.0
  description: An example API.
paths:
  /users:
    get:
      summary: Get all users.
      description: Retrieves a list of all users.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user.
      description: Creates a new user.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully.
        '400':
          description: Bad request.
  /users/{user_id}:
    get:
      summary: Get a user by ID.
      description: Retrieves a specific user by their ID.
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: The ID of the user to retrieve.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
    put:
      summary: Update a user by ID.
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: The ID of the user to update.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully.
        '404':
          description: User not found.
        '400':
          description: Bad request.
  /login:
    post:
      summary: Login.
      description: Authenticates a user.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Successful login.
        '401':
          description: Unauthorized.
        '500':
          description: Internal server error.
  /items/:
    get:
      summary: Get all items.
      description: Retrieves a list of all items.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
    post:
      summary: Create a new item.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ItemCreate'
      responses:
        '201':
          description: Item created successfully.
        '400':
          description: Bad request.
  /items/{item_id}:
    get:
      summary: Get an item by ID.
      parameters:
        - in: path
          name: item_id
          schema:
            type: integer
          required: true
          description: The ID of the item to retrieve.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found.
  /My:
    get:
      summary: Get My.
      description: Retrieves a My resource.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                type: string
    post:
      summary: Create a new My.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/MyCreate'
      responses:
        '201':
          description: My created successfully.
        '400':
          description: Bad request.
  /My/{id}:
    get:
      summary: Get My by ID.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the My resource to retrieve.
    put:
      summary: Update a My by ID.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the My resource to update.
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/MyUpdate'
      responses:
        '200':
          description: My updated successfully.
        '404':
          description: My not found.
        '400':
          description: Bad request.
    delete:
      summary: Delete a My by ID.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
            description: The ID of the My resource to delete.
      responses:
        '204':
          description: My deleted successfully.
        '404':
          description: My not found.
        '400':
          description: Bad request.
  /api/data:
    get:
      summary: Get API data.
      description: Retrieves API data.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                type: string
  /users/:
    get:
      summary: Get all users.
      description: Retrieves a list of all users.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      summary: Get a user by ID.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the user to retrieve.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
  /login/:
    get:
      summary: Login.
      description: Authenticates a user.
      responses:
        '200':
          description: Successful login.
        '401':
          description: Unauthorized.
        '500':
          description: Internal server error.
  /ping:
    get:
      summary: Ping.
      description: Returns a success response.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                type: string
  /api/v1:
    get:
      summary: Get API v1 data.
      description: Retrieves API v1 data.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                type: string
    post:
      summary: Create a new API v1 resource.
      responses:
        '201':
          description: Resource created successfully.
        '400':
          description: Bad request.
  /api/v1:
    get:
      summary: Get API v1 data.
      description: Retrieves API v1 data.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                type: string
    put:
      summary: Update a API v1 resource.
      responses:
        '200':
          description: Resource updated successfully.
        '404':
          description: Resource not found.
        '400':
          description: Bad request.
  /api/v1:
    delete:
      summary: Delete a API v1 resource.
      responses:
        '204':
          description: Resource deleted successfully.
        '404':
          description: Resource not found.
        '400':
          description: Bad request.
  /:
    get:
      summary: Get Root.
      description: Retrieves a root resource.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                type: string
  /articles/:
    get:
      summary: Get all articles.
      description: Retrieves a list of all articles.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
  /articles/{pk}/:
    get:
      summary: Get an article by ID.
      parameters:
        - in: path
          name: pk
          schema:
            type: integer
          required: true
          description: The ID of the article to retrieve.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Article'
        '404':
          description: Article not found.
  /hello:
    get:
      summary: Hello.
      description: Returns a hello message.
      responses:
        '200':
          description: Successful operation.
          content:
            'application/json':
              schema:
                type: string
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the user.
        username:
          type: string
          description: The user's username.
        email:
          type: string
          description: The user's email address.
    UserCreate:
      type: object
      properties:
        username:
          type: string
          description: The user's username.
        email:
          type: string
          description: The user's email address.
    UserUpdate:
      type: object
      properties:
        username:
          type: string
          description: The user's username.
        email:
          type: string
          description: The user's email address.
    Login:
      type: object
      properties:
        username:
          type: string
          description: The user's username.
        password:
          type: string
          description: The user's password.
    Item:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the item.
        name:
          type: string
          description: The item's name.