openapi: 3.0.0
info:
  title: Next.js API
  version: 1.0.0
  description: A simple Next.js API.
paths:
  '/':
    get:
      summary: Returns a welcome message.
      description: Returns a basic welcome message.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Hello, world!'
  '/hello':
    get:
      summary: Returns a greeting.
      description: Returns a predefined greeting message.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Hello from Next.js!'
  '/users':
    get:
      summary: Retrieves a list of users.
      description: Returns an array of User objects.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Creates a new user.
      description: Creates a new user and adds it to the list.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                  description: The user's ID.
                  example: 1
                name:
                  type: string
                  description: The user's name.
                  example: 'John Doe'
      responses:
        '201':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  '/users/{id}':
    get:
      summary: Retrieves a user by ID.
      description: Returns a single User object by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the user to retrieve.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not found'
    put:
      summary: Updates a user by ID.
      description: Updates a user's information by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the user to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                  description: The user's ID.
                  example: 1
                name:
                  type: string
                  description: The user's name.
                  example: 'Jane Doe'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not found'
    delete:
      summary: Deletes a user by ID.
      description: Deletes a user by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the user to delete.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User deleted'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not found'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: The user's ID.
        name:
          type: string
          description: The user's name.
